From fff06c78afe8393bd1549f416d2237f5dedc935a Mon Sep 17 00:00:00 2001
From: Guan Xuetao <gxt@mprc.pku.edu.cn>
Date: Mon, 28 Nov 2011 15:56:53 +0800
Subject: [PATCH 4/8] unicore32-oldabi: restore signal handling

Signed-off-by: Guan Xuetao <gxt@mprc.pku.edu.cn>
---
 arch/unicore32/include/uapi/asm/sigcontext.h |  35 ++++-
 arch/unicore32/kernel/signal.c               | 222 ++++++++++++++++++---------
 2 files changed, 185 insertions(+), 72 deletions(-)

diff --git a/arch/unicore32/include/uapi/asm/sigcontext.h b/arch/unicore32/include/uapi/asm/sigcontext.h
index 6a2d767..e3dcad9 100644
--- a/arch/unicore32/include/uapi/asm/sigcontext.h
+++ b/arch/unicore32/include/uapi/asm/sigcontext.h
@@ -12,7 +12,6 @@
 #ifndef __UNICORE_SIGCONTEXT_H__
 #define __UNICORE_SIGCONTEXT_H__
 
-#include <asm/ptrace.h>
 /*
  * Signal context structure - contains all info to do with the state
  * before the signal handler was invoked.  Note: only add new entries
@@ -22,8 +21,40 @@ struct sigcontext {
 	unsigned long trap_no;
 	unsigned long error_code;
 	unsigned long oldmask;
+	unsigned long ucreg_00;
+	unsigned long ucreg_01;
+	unsigned long ucreg_02;
+	unsigned long ucreg_03;
+	unsigned long ucreg_04;
+	unsigned long ucreg_05;
+	unsigned long ucreg_06;
+	unsigned long ucreg_07;
+	unsigned long ucreg_08;
+	unsigned long ucreg_09;
+	unsigned long ucreg_10;
+	unsigned long ucreg_11;
+	unsigned long ucreg_12;
+	unsigned long ucreg_13;
+	unsigned long ucreg_14;
+	unsigned long ucreg_15;
+	unsigned long ucreg_16;
+	unsigned long ucreg_17;
+	unsigned long ucreg_18;
+	unsigned long ucreg_19;
+	unsigned long ucreg_20;
+	unsigned long ucreg_21;
+	unsigned long ucreg_22;
+	unsigned long ucreg_23;
+	unsigned long ucreg_24;
+	unsigned long ucreg_25;
+	unsigned long ucreg_26;
+	unsigned long ucreg_fp;
+	unsigned long ucreg_ip;
+	unsigned long ucreg_sp;
+	unsigned long ucreg_lr;
+	unsigned long ucreg_pc;
+	unsigned long ucreg_asr;
 	unsigned long fault_address;
-	struct pt_regs regs;
 };
 
 #endif
diff --git a/arch/unicore32/kernel/signal.c b/arch/unicore32/kernel/signal.c
index b8b2ffd..6d580b5 100644
--- a/arch/unicore32/kernel/signal.c
+++ b/arch/unicore32/kernel/signal.c
@@ -23,9 +23,12 @@
 /*
  * For UniCore syscalls, we encode the syscall number into the instruction.
  */
-#define SWI_SYS_SIGRETURN	(0xff000000) /* error number for new abi */
-#define SWI_SYS_RT_SIGRETURN	(0xff000000 | (__NR_rt_sigreturn))
-#define SWI_SYS_RESTART		(0xff000000 | (__NR_restart_syscall))
+#define SWI_SYS_SIGRETURN	(0xff000000 | (__NR_SYSCALL_BASE)	\
+					| (__NR_sigreturn))
+#define SWI_SYS_RT_SIGRETURN	(0xff000000 | (__NR_SYSCALL_BASE)	\
+					| (__NR_rt_sigreturn))
+#define SWI_SYS_RESTART		(0xff000000 | (__NR_SYSCALL_BASE)	\
+					| (__NR_restart_syscall))
 
 #define KERN_SIGRETURN_CODE	(KUSER_VECPAGE_BASE + 0x00000500)
 #define KERN_RESTART_CODE	(KERN_SIGRETURN_CODE + sizeof(sigreturn_codes))
@@ -40,6 +43,55 @@ const unsigned long syscall_restart_code[2] = {
 };
 
 /*
+ * atomically swap in the new signal mask, and wait for a signal.
+ */
+asmlinkage int sys_sigsuspend(int restart, unsigned long oldmask,
+		old_sigset_t mask)
+{
+	mask &= (~(sigmask(SIGKILL) | sigmask(SIGSTOP)));
+	spin_lock_irq(&current->sighand->siglock);
+	current->saved_sigmask = current->blocked;
+	siginitset(&current->blocked, mask);
+	recalc_sigpending();
+	spin_unlock_irq(&current->sighand->siglock);
+
+	current->state = TASK_INTERRUPTIBLE;
+	schedule();
+	set_restore_sigmask();
+	return -ERESTARTNOHAND;
+}
+
+asmlinkage int sys_sigaction(int sig, const struct sigaction __user *act,
+	      struct sigaction __user *oact)
+{
+	struct k_sigaction new_ka, old_ka;
+	int ret;
+
+	if (act) {
+		old_sigset_t mask;
+		if (!access_ok(VERIFY_READ, act, sizeof(*act)) ||
+		    __get_user(new_ka.sa.sa_handler, &act->sa_handler))
+			return -EFAULT;
+		__get_user(new_ka.sa.sa_flags, &act->sa_flags);
+		__get_user(mask, &act->sa_mask.sig[0]);
+		siginitset(&new_ka.sa.sa_mask, mask);
+	}
+
+	ret = do_sigaction(sig, act ? &new_ka : NULL, oact ? &old_ka : NULL);
+
+	if (!ret && oact) {
+		if (!access_ok(VERIFY_WRITE, oact, sizeof(*oact)) ||
+		    __put_user(old_ka.sa.sa_handler, &oact->sa_handler))
+			return -EFAULT;
+		__put_user(old_ka.sa.sa_flags, &oact->sa_flags);
+		__put_user(old_ka.sa.sa_mask.sig[0], &oact->sa_mask.sig[0]);
+		__put_user(old_ka.sa.sa_mask.sig[1], &oact->sa_mask.sig[1]);
+	}
+
+	return ret;
+}
+
+/*
  * Do a signal return; undo the signal stack.  These are aligned to 64-bit.
  */
 struct sigframe {
@@ -61,46 +113,76 @@ static int restore_sigframe(struct pt_regs *regs, struct sigframe __user *sf)
 	if (err == 0)
 		set_current_blocked(&set);
 
-	err |= __get_user(regs->UCreg_00, &sf->uc.uc_mcontext.regs.UCreg_00);
-	err |= __get_user(regs->UCreg_01, &sf->uc.uc_mcontext.regs.UCreg_01);
-	err |= __get_user(regs->UCreg_02, &sf->uc.uc_mcontext.regs.UCreg_02);
-	err |= __get_user(regs->UCreg_03, &sf->uc.uc_mcontext.regs.UCreg_03);
-	err |= __get_user(regs->UCreg_04, &sf->uc.uc_mcontext.regs.UCreg_04);
-	err |= __get_user(regs->UCreg_05, &sf->uc.uc_mcontext.regs.UCreg_05);
-	err |= __get_user(regs->UCreg_06, &sf->uc.uc_mcontext.regs.UCreg_06);
-	err |= __get_user(regs->UCreg_07, &sf->uc.uc_mcontext.regs.UCreg_07);
-	err |= __get_user(regs->UCreg_08, &sf->uc.uc_mcontext.regs.UCreg_08);
-	err |= __get_user(regs->UCreg_09, &sf->uc.uc_mcontext.regs.UCreg_09);
-	err |= __get_user(regs->UCreg_10, &sf->uc.uc_mcontext.regs.UCreg_10);
-	err |= __get_user(regs->UCreg_11, &sf->uc.uc_mcontext.regs.UCreg_11);
-	err |= __get_user(regs->UCreg_12, &sf->uc.uc_mcontext.regs.UCreg_12);
-	err |= __get_user(regs->UCreg_13, &sf->uc.uc_mcontext.regs.UCreg_13);
-	err |= __get_user(regs->UCreg_14, &sf->uc.uc_mcontext.regs.UCreg_14);
-	err |= __get_user(regs->UCreg_15, &sf->uc.uc_mcontext.regs.UCreg_15);
-	err |= __get_user(regs->UCreg_16, &sf->uc.uc_mcontext.regs.UCreg_16);
-	err |= __get_user(regs->UCreg_17, &sf->uc.uc_mcontext.regs.UCreg_17);
-	err |= __get_user(regs->UCreg_18, &sf->uc.uc_mcontext.regs.UCreg_18);
-	err |= __get_user(regs->UCreg_19, &sf->uc.uc_mcontext.regs.UCreg_19);
-	err |= __get_user(regs->UCreg_20, &sf->uc.uc_mcontext.regs.UCreg_20);
-	err |= __get_user(regs->UCreg_21, &sf->uc.uc_mcontext.regs.UCreg_21);
-	err |= __get_user(regs->UCreg_22, &sf->uc.uc_mcontext.regs.UCreg_22);
-	err |= __get_user(regs->UCreg_23, &sf->uc.uc_mcontext.regs.UCreg_23);
-	err |= __get_user(regs->UCreg_24, &sf->uc.uc_mcontext.regs.UCreg_24);
-	err |= __get_user(regs->UCreg_25, &sf->uc.uc_mcontext.regs.UCreg_25);
-	err |= __get_user(regs->UCreg_26, &sf->uc.uc_mcontext.regs.UCreg_26);
-	err |= __get_user(regs->UCreg_fp, &sf->uc.uc_mcontext.regs.UCreg_fp);
-	err |= __get_user(regs->UCreg_ip, &sf->uc.uc_mcontext.regs.UCreg_ip);
-	err |= __get_user(regs->UCreg_sp, &sf->uc.uc_mcontext.regs.UCreg_sp);
-	err |= __get_user(regs->UCreg_lr, &sf->uc.uc_mcontext.regs.UCreg_lr);
-	err |= __get_user(regs->UCreg_pc, &sf->uc.uc_mcontext.regs.UCreg_pc);
-	err |= __get_user(regs->UCreg_asr, &sf->uc.uc_mcontext.regs.UCreg_asr);
+	err |= __get_user(regs->UCreg_00, &sf->uc.uc_mcontext.ucreg_00);
+	err |= __get_user(regs->UCreg_01, &sf->uc.uc_mcontext.ucreg_01);
+	err |= __get_user(regs->UCreg_02, &sf->uc.uc_mcontext.ucreg_02);
+	err |= __get_user(regs->UCreg_03, &sf->uc.uc_mcontext.ucreg_03);
+	err |= __get_user(regs->UCreg_04, &sf->uc.uc_mcontext.ucreg_04);
+	err |= __get_user(regs->UCreg_05, &sf->uc.uc_mcontext.ucreg_05);
+	err |= __get_user(regs->UCreg_06, &sf->uc.uc_mcontext.ucreg_06);
+	err |= __get_user(regs->UCreg_07, &sf->uc.uc_mcontext.ucreg_07);
+	err |= __get_user(regs->UCreg_08, &sf->uc.uc_mcontext.ucreg_08);
+	err |= __get_user(regs->UCreg_09, &sf->uc.uc_mcontext.ucreg_09);
+	err |= __get_user(regs->UCreg_10, &sf->uc.uc_mcontext.ucreg_10);
+	err |= __get_user(regs->UCreg_11, &sf->uc.uc_mcontext.ucreg_11);
+	err |= __get_user(regs->UCreg_12, &sf->uc.uc_mcontext.ucreg_12);
+	err |= __get_user(regs->UCreg_13, &sf->uc.uc_mcontext.ucreg_13);
+	err |= __get_user(regs->UCreg_14, &sf->uc.uc_mcontext.ucreg_14);
+	err |= __get_user(regs->UCreg_15, &sf->uc.uc_mcontext.ucreg_15);
+	err |= __get_user(regs->UCreg_16, &sf->uc.uc_mcontext.ucreg_16);
+	err |= __get_user(regs->UCreg_17, &sf->uc.uc_mcontext.ucreg_17);
+	err |= __get_user(regs->UCreg_18, &sf->uc.uc_mcontext.ucreg_18);
+	err |= __get_user(regs->UCreg_19, &sf->uc.uc_mcontext.ucreg_19);
+	err |= __get_user(regs->UCreg_20, &sf->uc.uc_mcontext.ucreg_20);
+	err |= __get_user(regs->UCreg_21, &sf->uc.uc_mcontext.ucreg_21);
+	err |= __get_user(regs->UCreg_22, &sf->uc.uc_mcontext.ucreg_22);
+	err |= __get_user(regs->UCreg_23, &sf->uc.uc_mcontext.ucreg_23);
+	err |= __get_user(regs->UCreg_24, &sf->uc.uc_mcontext.ucreg_24);
+	err |= __get_user(regs->UCreg_25, &sf->uc.uc_mcontext.ucreg_25);
+	err |= __get_user(regs->UCreg_26, &sf->uc.uc_mcontext.ucreg_26);
+	err |= __get_user(regs->UCreg_fp, &sf->uc.uc_mcontext.ucreg_fp);
+	err |= __get_user(regs->UCreg_ip, &sf->uc.uc_mcontext.ucreg_ip);
+	err |= __get_user(regs->UCreg_sp, &sf->uc.uc_mcontext.ucreg_sp);
+	err |= __get_user(regs->UCreg_lr, &sf->uc.uc_mcontext.ucreg_lr);
+	err |= __get_user(regs->UCreg_pc, &sf->uc.uc_mcontext.ucreg_pc);
+	err |= __get_user(regs->UCreg_asr, &sf->uc.uc_mcontext.ucreg_asr);
 
 	err |= !valid_user_regs(regs);
 
 	return err;
 }
 
-asmlinkage int __sys_rt_sigreturn(struct pt_regs *regs)
+asmlinkage int sys_sigreturn(struct pt_regs *regs)
+{
+	struct sigframe __user *frame;
+
+	/* Always make any pending restarted system calls return -EINTR */
+	current_thread_info()->restart_block.fn = do_no_restart_syscall;
+
+	/*
+	 * Since we stacked the signal on a 64-bit boundary,
+	 * then 'sp' should be word aligned here.  If it's
+	 * not, then the user is trying to mess with us.
+	 */
+	if (regs->UCreg_sp & 7)
+		goto badframe;
+
+	frame = (struct sigframe __user *)regs->UCreg_sp;
+
+	if (!access_ok(VERIFY_READ, frame, sizeof(*frame)))
+		goto badframe;
+
+	if (restore_sigframe(regs, frame))
+		goto badframe;
+
+	return regs->UCreg_00;
+
+badframe:
+	force_sig(SIGSEGV, current);
+	return 0;
+}
+
+asmlinkage int sys_rt_sigreturn(struct pt_regs *regs)
 {
 	struct rt_sigframe __user *frame;
 
@@ -139,39 +221,39 @@ static int setup_sigframe(struct sigframe __user *sf, struct pt_regs *regs,
 {
 	int err = 0;
 
-	err |= __put_user(regs->UCreg_00, &sf->uc.uc_mcontext.regs.UCreg_00);
-	err |= __put_user(regs->UCreg_01, &sf->uc.uc_mcontext.regs.UCreg_01);
-	err |= __put_user(regs->UCreg_02, &sf->uc.uc_mcontext.regs.UCreg_02);
-	err |= __put_user(regs->UCreg_03, &sf->uc.uc_mcontext.regs.UCreg_03);
-	err |= __put_user(regs->UCreg_04, &sf->uc.uc_mcontext.regs.UCreg_04);
-	err |= __put_user(regs->UCreg_05, &sf->uc.uc_mcontext.regs.UCreg_05);
-	err |= __put_user(regs->UCreg_06, &sf->uc.uc_mcontext.regs.UCreg_06);
-	err |= __put_user(regs->UCreg_07, &sf->uc.uc_mcontext.regs.UCreg_07);
-	err |= __put_user(regs->UCreg_08, &sf->uc.uc_mcontext.regs.UCreg_08);
-	err |= __put_user(regs->UCreg_09, &sf->uc.uc_mcontext.regs.UCreg_09);
-	err |= __put_user(regs->UCreg_10, &sf->uc.uc_mcontext.regs.UCreg_10);
-	err |= __put_user(regs->UCreg_11, &sf->uc.uc_mcontext.regs.UCreg_11);
-	err |= __put_user(regs->UCreg_12, &sf->uc.uc_mcontext.regs.UCreg_12);
-	err |= __put_user(regs->UCreg_13, &sf->uc.uc_mcontext.regs.UCreg_13);
-	err |= __put_user(regs->UCreg_14, &sf->uc.uc_mcontext.regs.UCreg_14);
-	err |= __put_user(regs->UCreg_15, &sf->uc.uc_mcontext.regs.UCreg_15);
-	err |= __put_user(regs->UCreg_16, &sf->uc.uc_mcontext.regs.UCreg_16);
-	err |= __put_user(regs->UCreg_17, &sf->uc.uc_mcontext.regs.UCreg_17);
-	err |= __put_user(regs->UCreg_18, &sf->uc.uc_mcontext.regs.UCreg_18);
-	err |= __put_user(regs->UCreg_19, &sf->uc.uc_mcontext.regs.UCreg_19);
-	err |= __put_user(regs->UCreg_20, &sf->uc.uc_mcontext.regs.UCreg_20);
-	err |= __put_user(regs->UCreg_21, &sf->uc.uc_mcontext.regs.UCreg_21);
-	err |= __put_user(regs->UCreg_22, &sf->uc.uc_mcontext.regs.UCreg_22);
-	err |= __put_user(regs->UCreg_23, &sf->uc.uc_mcontext.regs.UCreg_23);
-	err |= __put_user(regs->UCreg_24, &sf->uc.uc_mcontext.regs.UCreg_24);
-	err |= __put_user(regs->UCreg_25, &sf->uc.uc_mcontext.regs.UCreg_25);
-	err |= __put_user(regs->UCreg_26, &sf->uc.uc_mcontext.regs.UCreg_26);
-	err |= __put_user(regs->UCreg_fp, &sf->uc.uc_mcontext.regs.UCreg_fp);
-	err |= __put_user(regs->UCreg_ip, &sf->uc.uc_mcontext.regs.UCreg_ip);
-	err |= __put_user(regs->UCreg_sp, &sf->uc.uc_mcontext.regs.UCreg_sp);
-	err |= __put_user(regs->UCreg_lr, &sf->uc.uc_mcontext.regs.UCreg_lr);
-	err |= __put_user(regs->UCreg_pc, &sf->uc.uc_mcontext.regs.UCreg_pc);
-	err |= __put_user(regs->UCreg_asr, &sf->uc.uc_mcontext.regs.UCreg_asr);
+	err |= __put_user(regs->UCreg_00, &sf->uc.uc_mcontext.ucreg_00);
+	err |= __put_user(regs->UCreg_01, &sf->uc.uc_mcontext.ucreg_01);
+	err |= __put_user(regs->UCreg_02, &sf->uc.uc_mcontext.ucreg_02);
+	err |= __put_user(regs->UCreg_03, &sf->uc.uc_mcontext.ucreg_03);
+	err |= __put_user(regs->UCreg_04, &sf->uc.uc_mcontext.ucreg_04);
+	err |= __put_user(regs->UCreg_05, &sf->uc.uc_mcontext.ucreg_05);
+	err |= __put_user(regs->UCreg_06, &sf->uc.uc_mcontext.ucreg_06);
+	err |= __put_user(regs->UCreg_07, &sf->uc.uc_mcontext.ucreg_07);
+	err |= __put_user(regs->UCreg_08, &sf->uc.uc_mcontext.ucreg_08);
+	err |= __put_user(regs->UCreg_09, &sf->uc.uc_mcontext.ucreg_09);
+	err |= __put_user(regs->UCreg_10, &sf->uc.uc_mcontext.ucreg_10);
+	err |= __put_user(regs->UCreg_11, &sf->uc.uc_mcontext.ucreg_11);
+	err |= __put_user(regs->UCreg_12, &sf->uc.uc_mcontext.ucreg_12);
+	err |= __put_user(regs->UCreg_13, &sf->uc.uc_mcontext.ucreg_13);
+	err |= __put_user(regs->UCreg_14, &sf->uc.uc_mcontext.ucreg_14);
+	err |= __put_user(regs->UCreg_15, &sf->uc.uc_mcontext.ucreg_15);
+	err |= __put_user(regs->UCreg_16, &sf->uc.uc_mcontext.ucreg_16);
+	err |= __put_user(regs->UCreg_17, &sf->uc.uc_mcontext.ucreg_17);
+	err |= __put_user(regs->UCreg_18, &sf->uc.uc_mcontext.ucreg_18);
+	err |= __put_user(regs->UCreg_19, &sf->uc.uc_mcontext.ucreg_19);
+	err |= __put_user(regs->UCreg_20, &sf->uc.uc_mcontext.ucreg_20);
+	err |= __put_user(regs->UCreg_21, &sf->uc.uc_mcontext.ucreg_21);
+	err |= __put_user(regs->UCreg_22, &sf->uc.uc_mcontext.ucreg_22);
+	err |= __put_user(regs->UCreg_23, &sf->uc.uc_mcontext.ucreg_23);
+	err |= __put_user(regs->UCreg_24, &sf->uc.uc_mcontext.ucreg_24);
+	err |= __put_user(regs->UCreg_25, &sf->uc.uc_mcontext.ucreg_25);
+	err |= __put_user(regs->UCreg_26, &sf->uc.uc_mcontext.ucreg_26);
+	err |= __put_user(regs->UCreg_fp, &sf->uc.uc_mcontext.ucreg_fp);
+	err |= __put_user(regs->UCreg_ip, &sf->uc.uc_mcontext.ucreg_ip);
+	err |= __put_user(regs->UCreg_sp, &sf->uc.uc_mcontext.ucreg_sp);
+	err |= __put_user(regs->UCreg_lr, &sf->uc.uc_mcontext.ucreg_lr);
+	err |= __put_user(regs->UCreg_pc, &sf->uc.uc_mcontext.ucreg_pc);
+	err |= __put_user(regs->UCreg_asr, &sf->uc.uc_mcontext.ucreg_asr);
 
 	err |= __put_user(current->thread.trap_no,
 			&sf->uc.uc_mcontext.trap_no);
-- 
2.0.0.GIT

