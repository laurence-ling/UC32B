From 6b2cc2904269d1c9faf5a7870be4fde2f236c1b0 Mon Sep 17 00:00:00 2001
From: Guan Xuetao <gxt@mprc.pku.edu.cn>
Date: Tue, 14 Aug 2012 09:20:00 +0800
Subject: [PATCH 111/247] unicore64: Add do_srfr handlers for sr/bfr registers

Signed-off-by: Guan Xuetao <gxt@mprc.pku.edu.cn>
---
 target-unicore64/helper.c    |   34 +++++++++++++++++++++++++++++++++
 target-unicore64/helper.h    |    6 ++++++
 target-unicore64/translate.c |   43 +++++++++++++++++++++++++++++-------------
 3 files changed, 70 insertions(+), 13 deletions(-)

diff --git a/target-unicore64/helper.c b/target-unicore64/helper.c
index f584b9d..82f4635 100644
--- a/target-unicore64/helper.c
+++ b/target-unicore64/helper.c
@@ -55,6 +55,35 @@ void HELPER(exception)(uint32_t excp)
     cpu_loop_exit(env);
 }
 
+void HELPER(bsr_write)(uint64_t x)
+{
+    env->bsr = x & 0x7ff;
+}
+
+void HELPER(bfr_write)(uint64_t x)
+{
+    env->bfr = x & 0xf;
+}
+
+uint64_t HELPER(bfr_read)(void)
+{
+    return env->bfr;
+}
+
+uint64_t HELPER(bsr_read)(void)
+{
+    return env->bsr;
+}
+
+void HELPER(asr_write)(uint64_t x)
+{
+    uint64_t mod = x & ASR_MODE_SELECT;
+    if (env->uncached_asr ^ mod) {
+        switch_mode(env, mod);
+    }
+    env->uncached_asr = x & 0x7ff;
+}
+
 void HELPER(afr_write)(uint64_t x)
 {
     env->NF = x << 60;
@@ -69,6 +98,11 @@ uint64_t HELPER(afr_read)(void)
         (env->CF << 1) | (env->VF >> 63));
 }
 
+uint64_t HELPER(asr_read)(void)
+{
+    return env->uncached_asr;
+}
+
 uint32_t HELPER(clo_i32)(uint32_t x)
 {
         return clo32(x);
diff --git a/target-unicore64/helper.h b/target-unicore64/helper.h
index b0cf36b..e669485 100644
--- a/target-unicore64/helper.h
+++ b/target-unicore64/helper.h
@@ -13,7 +13,13 @@ DEF_HELPER_1(cp1_putx, void, i64)
 
 DEF_HELPER_1(exception, void, i32)
 DEF_HELPER_0(afr_read, i64)
+DEF_HELPER_0(asr_read, i64)
+DEF_HELPER_0(bfr_read, i64)
+DEF_HELPER_0(bsr_read, i64)
 DEF_HELPER_1(afr_write, void, i64)
+DEF_HELPER_1(asr_write, void, i64)
+DEF_HELPER_1(bfr_write, void, i64)
+DEF_HELPER_1(bsr_write, void, i64)
 DEF_HELPER_1(clz_i32, i32, i32)
 DEF_HELPER_1(clz_i64, i64, i64)
 DEF_HELPER_1(clo_i32, i32, i32)
diff --git a/target-unicore64/translate.c b/target-unicore64/translate.c
index 9a6d170..e1a5d3e 100644
--- a/target-unicore64/translate.c
+++ b/target-unicore64/translate.c
@@ -733,40 +733,57 @@ static void do_srfr(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
 
     t_flag_64 = tcg_temp_new_i64();
 
-    if ((insn & 0xfbfffff0) == 0x38200000) { /* insn mov afr, imm */
+    if ((insn & 0xfbfffff0) == 0x38200000) { /* insn mov afr/bfr, imm */
         tcg_gen_movi_i64(t_flag_64, (uint64_t)insn & 0xf);
-        if (UCOP_SET(26)) { /* C bit*/
+        if (UCOP_SET(26)) { /* C bit: insn mov afr, imm*/
             gen_helper_afr_write(t_flag_64);
-        } else {
-            ILLEGAL_INSN(true);
+        } else {/* insn mov bfr, imm */
+            gen_helper_bfr_write(t_flag_64);
         }
 
         tcg_temp_free_i64(t_flag_64);
         return;
     }
-    if ((insn & 0xf3ff07ff) == 0x30000000) { /* insn mov afr, rs1 */
+    if ((insn & 0xf3ff07ff) == 0x30000000) { /* mov reg to STATUS/FLAG */
         ILLEGAL_INSN(UCOP_REG_S1 == 31);
 
         tcg_gen_mov_i64(t_flag_64, cpu_R[UCOP_REG_S1]);
-        if (UCOP_SET(27) && UCOP_SET(26)) { /* F bit C bit */
+
+        switch ((insn >> 26) & 0x3) {
+        case 0: /* !F && !C : bsr */
+            gen_helper_bsr_write(t_flag_64);
+            break;
+        case 1: /* !F &&  C : asr */
+            gen_helper_asr_write(t_flag_64);
+            break;
+        case 2: /*  F && !C : bfr */
+            gen_helper_bfr_write(t_flag_64);
+            break;
+        case 3: /*  F &&  C : afr */
             gen_helper_afr_write(t_flag_64);
-        } else {
-            ILLEGAL_INSN(true);
         }
 
         tcg_temp_free_i64(t_flag_64);
         return;
     }
-    if ((insn & 0xf3e0ffff) == 0x20000000) { /* insn mov rd, afr */
+    if ((insn & 0xf3e0ffff) == 0x20000000) { /* mov STATUS/FLAG to reg */
         ILLEGAL_INSN(UCOP_REG_D == 31);
 
-        if (UCOP_SET(27) && UCOP_SET(26)) { /* F bit C bit */
+        switch ((insn >> 26) & 0x3) {
+        case 0: /* !F && !C : bsr */
+            gen_helper_bsr_read(t_flag_64);
+            break;
+        case 1: /* !F &&  C : asr */
+            gen_helper_asr_read(t_flag_64);
+            break;
+        case 2: /*  F && !C : bfr */
+            gen_helper_bfr_read(t_flag_64);
+            break;
+        case 3: /*  F &&  C : afr */
             gen_helper_afr_read(t_flag_64);
-            tcg_gen_mov_i64(cpu_R[UCOP_REG_D], t_flag_64);
-        } else {
-            ILLEGAL_INSN(true);
         }
 
+        tcg_gen_mov_i64(cpu_R[UCOP_REG_D], t_flag_64);
         tcg_temp_free_i64(t_flag_64);
         return;
     }
-- 
1.7.9.5

