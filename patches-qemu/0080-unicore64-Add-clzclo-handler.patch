From 092b930604bc1cfdea581b392cd5a1c6468f6ca1 Mon Sep 17 00:00:00 2001
From: Guan Xuetao <gxt@mprc.pku.edu.cn>
Date: Sat, 11 Aug 2012 10:13:57 +0800
Subject: [PATCH 080/247] unicore64: Add clzclo handler

Signed-off-by: Guan Xuetao <gxt@mprc.pku.edu.cn>
---
 target-unicore64/helper.c    |   21 +++++++++++++++++++++
 target-unicore64/helper.h    |    4 ++++
 target-unicore64/translate.c |   37 ++++++++++++++++++++++++++++++++++++-
 3 files changed, 61 insertions(+), 1 deletion(-)

diff --git a/target-unicore64/helper.c b/target-unicore64/helper.c
index 36e243d..b4c15b4 100644
--- a/target-unicore64/helper.c
+++ b/target-unicore64/helper.c
@@ -67,6 +67,27 @@ uint32_t HELPER(afr_read)(void)
 {
     return (env->NF << 3) | (env->ZF << 2) | (env->CF << 1) | (env->VF << 0);
 }
+
+uint32_t HELPER(clo_i32)(uint32_t x)
+{
+        return clo32(x);
+}
+
+uint64_t HELPER(clo_i64)(uint64_t x)
+{
+        return clo64(x);
+}
+
+uint32_t HELPER(clz_i32)(uint32_t x)
+{
+        return clz32(x);
+}
+
+uint64_t HELPER(clz_i64)(uint64_t x)
+{
+        return clz64(x);
+}
+
 /*
  * Flag setting arithmetic is awkward because we need to do comparisons.
  * The only way to do that in TCG is a conditional branch, which clobbers
diff --git a/target-unicore64/helper.h b/target-unicore64/helper.h
index fed5f62..44d271e 100644
--- a/target-unicore64/helper.h
+++ b/target-unicore64/helper.h
@@ -14,6 +14,10 @@ DEF_HELPER_1(cp1_putx, void, i64)
 DEF_HELPER_1(exception, void, i32)
 DEF_HELPER_0(afr_read, i32)
 DEF_HELPER_1(afr_write, void, i32)
+DEF_HELPER_1(clz_i32, i32, i32)
+DEF_HELPER_1(clz_i64, i64, i64)
+DEF_HELPER_1(clo_i32, i32, i32)
+DEF_HELPER_1(clo_i64, i64, i64)
 DEF_HELPER_2(sub_cc_i32, i32, i32, i32)
 DEF_HELPER_2(sub_cc_i64, i64, i64, i64)
 DEF_HELPER_2(add_cc_i32, i32, i32, i32)
diff --git a/target-unicore64/translate.c b/target-unicore64/translate.c
index 894ede5..cdb66a1 100644
--- a/target-unicore64/translate.c
+++ b/target-unicore64/translate.c
@@ -300,7 +300,42 @@ static void do_shift(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
 
 static void do_clzclo(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
 {
-    ILLEGAL_INSN(true);
+    TCGv_i64 t_op1_64;
+    TCGv_i32 t_op1_32;
+
+    ILLEGAL_INSN(UCOP_SET(25));
+    ILLEGAL_INSN(UCOP_SET(24));
+    ILLEGAL_INSN(UCOP_SET(21));
+    ILLEGAL_INSN(UCOP_IMM11);
+
+    t_op1_64 = tcg_temp_new_i64();
+    tcg_gen_mov_i64(t_op1_64, cpu_R[UCOP_REG_S1]);
+
+    if (UCOP_SET(22)) { /* 64 bit */
+        if (UCOP_SET(23)) { /* DCNTLZ */
+            gen_helper_clz_i64(t_op1_64, t_op1_64);
+        } else { /* DCNTLO */
+            gen_helper_clo_i64(t_op1_64, t_op1_64);
+        }
+    } else {
+        t_op1_32 = tcg_temp_new_i32();
+        tcg_gen_trunc_i64_i32(t_op1_32, t_op1_64);
+        if (UCOP_SET(23)) { /* CNTLZ */
+            gen_helper_clz_i32(t_op1_32, t_op1_32);
+            tcg_gen_extu_i32_i64(t_op1_64, t_op1_32);
+        } else { /* CNTLO */
+            gen_helper_clo_i32(t_op1_32, t_op1_32);
+            tcg_gen_extu_i32_i64(t_op1_64, t_op1_32);
+        }
+    }
+
+    tcg_gen_mov_i64(cpu_R[UCOP_REG_D], t_op1_64);
+
+    if (!UCOP_SET(22)) {
+        tcg_temp_free_i32(t_op1_32);
+    }
+
+    tcg_temp_free_i64(t_op1_64);
 }
 
 static void do_condmove(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
-- 
1.7.9.5

