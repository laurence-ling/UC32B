From d368870c48979cc6573d89ca3764ee15a1ccc12a Mon Sep 17 00:00:00 2001
From: Guan Xuetao <gxt@mprc.pku.edu.cn>
Date: Fri, 10 Aug 2012 19:36:53 +0800
Subject: [PATCH 070/247] unicore64: Add do_condmove handler

Signed-off-by: Guan Xuetao <gxt@mprc.pku.edu.cn>
---
 target-unicore64/translate.c |   54 +++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 53 insertions(+), 1 deletion(-)

diff --git a/target-unicore64/translate.c b/target-unicore64/translate.c
index 2e01231..87ec3bf 100644
--- a/target-unicore64/translate.c
+++ b/target-unicore64/translate.c
@@ -71,6 +71,7 @@ void uc64_translate_init(void)
 #define UCOP_IMM_6              (((insn) >>  0) & 0x3f)
 #define UCOP_CPNUM              (((insn) >> 21) & 0xf)
 #define UCOP_LDST_BHD           (((insn) >> 22) & 0x7)
+#define UCOP_CMOV_COND          (((insn) >> 12) & 0xf)
 
 #define UCOP_SET(i)             ((insn) & (1 << (i)))
 
@@ -289,7 +290,58 @@ static void do_clzclo(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
 
 static void do_condmove(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
 {
-    ILLEGAL_INSN(true);
+    TCGv_i64 t_op2_64;
+    TCGv_i32 t_op2_32;
+
+    ILLEGAL_INSN(UCOP_REG_D == 31);
+    ILLEGAL_INSN(!UCOP_SET(24));
+    ILLEGAL_INSN(UCOP_SET(23)); /* S bit */
+    ILLEGAL_INSN(UCOP_SET(11));
+    ILLEGAL_INSN((UCOP_CMOV_COND == 0xe) || (UCOP_CMOV_COND == 0xf));
+
+    /* Two branches */
+    s->dc_condlabel = gen_new_label(); /* label for next instruction */
+    gen_test_cond(UCOP_CMOV_COND, s->dc_condlabel);
+    s->dc_condinsn = true;
+
+    /* Prepare op2 */
+    t_op2_64 = tcg_temp_new_i64();
+    if (UCOP_SET(21)) { /* reg or imm */
+        tcg_gen_movi_i64(t_op2_64, UCOP_IMM11);
+    } else {
+        ILLEGAL_INSN(UCOP_IMM_6);
+        if (UCOP_REG_S2 == 31) {
+            tcg_gen_movi_i64(t_op2_64, s->dc_pc);
+        } else {
+            tcg_gen_mov_i64(t_op2_64, cpu_R[UCOP_REG_S2]);
+        }
+    }
+
+    if (!UCOP_SET(22)) { /* If word, not Double word */
+        t_op2_32 = tcg_temp_new_i32();
+        tcg_gen_trunc_i64_i32(t_op2_32, t_op2_64);
+    }
+
+    if (UCOP_SET(25)) { /* DCNOT CNOT */
+        if (UCOP_SET(22)) { /* insn DCNOT */
+            tcg_gen_not_i64(cpu_R[UCOP_REG_D], t_op2_64);
+        } else { /* insn CNOT */
+            tcg_gen_not_i32(t_op2_32, t_op2_32);
+            tcg_gen_extu_i32_i64(cpu_R[UCOP_REG_D], t_op2_32);
+        }
+    } else { /* DCMOV CMOV */
+        if (UCOP_SET(22)) { /* insn DCMOV */
+            tcg_gen_mov_i64(cpu_R[UCOP_REG_D], t_op2_64);
+        } else { /* insn CMOV */
+            tcg_gen_extu_i32_i64(cpu_R[UCOP_REG_D], t_op2_32);
+        }
+    }
+
+    /* Free temp variables */
+    tcg_temp_free_i64(t_op2_64);
+    if (!UCOP_SET(22)) {
+        tcg_temp_free_i32(t_op2_32);
+    }
 }
 
 static void do_datap(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
-- 
1.7.9.5

