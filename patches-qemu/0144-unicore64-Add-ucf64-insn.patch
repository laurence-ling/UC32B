From 05ac93c60850b2fb9ebbbee9bd81e6dd0052a10f Mon Sep 17 00:00:00 2001
From: Meng Xiangzeng <mengxiangzeng@mprc.pku.edu.cn>
Date: Fri, 17 Aug 2012 19:34:24 +0800
Subject: [PATCH 144/247] unicore64: Add ucf64 insn

Signed-off-by: Song Tianbao <songtianbao@mprc.pku.edu.cn>
               Liu Wenhui <liuwenhui@mprc.pku.edu.cn>
               Meng Xiangzeng <mengxiangzeng@mprc.pku.edu.cn>
---
 target-unicore64/Makefile.objs  |    1 +
 target-unicore64/cpu.h          |    7 +
 target-unicore64/helper.h       |   25 +++
 target-unicore64/translate.c    |    9 ++
 target-unicore64/ucf64_helper.c |  266 ++++++++++++++++++++++++++++++++
 target-unicore64/ucf64_trans.h  |  317 +++++++++++++++++++++++++++++++++++++++
 6 files changed, 625 insertions(+)
 create mode 100644 target-unicore64/ucf64_helper.c
 create mode 100644 target-unicore64/ucf64_trans.h

diff --git a/target-unicore64/Makefile.objs b/target-unicore64/Makefile.objs
index 7adda9d..6b9e7bb 100644
--- a/target-unicore64/Makefile.objs
+++ b/target-unicore64/Makefile.objs
@@ -1,2 +1,3 @@
 obj-y += translate.o helper.o cpu.o
+obj-y += ucf64_helper.o
 obj-$(CONFIG_SOFTMMU) +=machine.o softmmu.o
diff --git a/target-unicore64/cpu.h b/target-unicore64/cpu.h
index f01ae05..b6ab18c 100644
--- a/target-unicore64/cpu.h
+++ b/target-unicore64/cpu.h
@@ -71,6 +71,13 @@ typedef struct CPUUniCore64State {
         uint64_t c12_sysu[8]; /* SysU registers. */
     } cp0;
 
+    /* UniCore-F64 coprocessor state.  */
+    struct {
+        float64 regs[16];
+        uint64_t xregs[32];
+        float_status fp_status;
+    } ucf64;
+
     CPU_COMMON
 
 } CPUUniCore64State;
diff --git a/target-unicore64/helper.h b/target-unicore64/helper.h
index 5bf3b3a..931f673 100644
--- a/target-unicore64/helper.h
+++ b/target-unicore64/helper.h
@@ -32,4 +32,29 @@ DEF_HELPER_2(sbc_cc_i64, i64, i64, i64)
 DEF_HELPER_2(adc_cc_i32, i32, i32, i32)
 DEF_HELPER_2(adc_cc_i64, i64, i64, i64)
 
+DEF_HELPER_1(ucf64_get_fpscr, i64, env)
+DEF_HELPER_2(ucf64_set_fpscr, void, env, i64)
+
+DEF_HELPER_3(ucf64_adds, f32, f32, f32, env)
+DEF_HELPER_3(ucf64_addd, f64, f64, f64, env)
+DEF_HELPER_3(ucf64_subs, f32, f32, f32, env)
+DEF_HELPER_3(ucf64_subd, f64, f64, f64, env)
+DEF_HELPER_3(ucf64_muls, f32, f32, f32, env)
+DEF_HELPER_3(ucf64_muld, f64, f64, f64, env)
+DEF_HELPER_3(ucf64_divs, f32, f32, f32, env)
+DEF_HELPER_3(ucf64_divd, f64, f64, f64, env)
+DEF_HELPER_1(ucf64_negs, f32, f32)
+DEF_HELPER_1(ucf64_negd, f64, f64)
+DEF_HELPER_1(ucf64_abss, f32, f32)
+DEF_HELPER_1(ucf64_absd, f64, f64)
+
+DEF_HELPER_2(ucf64_sf2df, f64, f32, env)
+DEF_HELPER_2(ucf64_df2sf, f32, f64, env)
+
+DEF_HELPER_2(ucf64_si2sf, f32, f32, env)
+DEF_HELPER_2(ucf64_si2df, f64, f32, env)
+
+DEF_HELPER_2(ucf64_sf2si, f32, f32, env)
+DEF_HELPER_2(ucf64_df2si, f32, f64, env)
+
 #include "def-helper.h"
diff --git a/target-unicore64/translate.c b/target-unicore64/translate.c
index 3656c61..4f7b28c 100644
--- a/target-unicore64/translate.c
+++ b/target-unicore64/translate.c
@@ -23,6 +23,10 @@
 #define GEN_HELPER 1
 #include "helper.h"
 
+/* FIXME:  These should be removed.  */
+TCGv_i32 cpu_F0s, cpu_F1s;
+TCGv_i64 cpu_F0d, cpu_F1d;
+
 static TCGv_ptr cpu_env;
 static TCGv_i64 cpu_R[32];
 
@@ -1196,6 +1200,8 @@ static void do_branch(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
     }
 }
 
+#include "ucf64_trans.h"
+
 static void do_coproc(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
 {
     TCGv_i64 t_creg_64, t_cop_64;
@@ -1252,6 +1258,9 @@ static void do_coproc(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
             ILLEGAL_INSN(true);
         }
         break;
+    case 2: /* floating point insn */
+        do_ucf64(env, s, insn);
+        break;
     default:
         ILLEGAL_INSN(true);
     }
diff --git a/target-unicore64/ucf64_helper.c b/target-unicore64/ucf64_helper.c
new file mode 100644
index 0000000..77e0a4e
--- /dev/null
+++ b/target-unicore64/ucf64_helper.c
@@ -0,0 +1,266 @@
+/*
+ * UniCore-F64 simulation helpers for QEMU.
+ *
+ * Copyright (C) 2010-2012 Guan Xuetao
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation, or any later version.
+ * See the COPYING file in the top-level directory.
+ */
+#include "cpu.h"
+#include "helper.h"
+
+/* UniCore-F64 system registers.  */
+#define UC64_UCF64_FPSCR                (31)
+#define UCF64_FPSCR_MASK                (0x7ffffff)
+#define UCF64_FPSCR_RND_MASK            (0x7)
+#define UCF64_FPSCR_RND(r)              (((r) >>  0) & UCF64_FPSCR_RND_MASK)
+#define UCF64_FPSCR_TRAPEN_MASK         (0x7f)
+#define UCF64_FPSCR_TRAPEN(r)           (((r) >> 10) & UCF64_FPSCR_TRAPEN_MASK)
+#define UCF64_FPSCR_FLAG_MASK           (0x1ff)
+#define UCF64_FPSCR_FLAG(r)             (((r) >> 17) & UCF64_FPSCR_FLAG_MASK)
+#define UCF64_FPSCR_FLAG_ZERO           (1 << 17)
+#define UCF64_FPSCR_FLAG_INFINITY       (1 << 18)
+#define UCF64_FPSCR_FLAG_INVALID        (1 << 19)
+#define UCF64_FPSCR_FLAG_UNDERFLOW      (1 << 20)
+#define UCF64_FPSCR_FLAG_OVERFLOW       (1 << 21)
+#define UCF64_FPSCR_FLAG_INEXACT        (1 << 22)
+#define UCF64_FPSCR_FLAG_HUGEINT        (1 << 23)
+#define UCF64_FPSCR_FLAG_DENORMAL       (1 << 24)
+#define UCF64_FPSCR_FLAG_DIVZERO        (1 << 25)
+
+/*
+ * The convention used for UniCore-F64 instructions:
+ *  Single precition routines have a "s" suffix
+ *  Double precision routines have a "d" suffix.
+ */
+
+/* Convert host exception flags to f64 form.  */
+static inline int ucf64_exceptbits_from_host(int host_bits)
+{
+    int target_bits = 0;
+
+    if (host_bits & float_flag_invalid) {
+        target_bits |= UCF64_FPSCR_FLAG_INVALID;
+    }
+    if (host_bits & float_flag_divbyzero) {
+        target_bits |= UCF64_FPSCR_FLAG_DIVZERO;
+    }
+    if (host_bits & float_flag_overflow) {
+        target_bits |= UCF64_FPSCR_FLAG_OVERFLOW;
+    }
+    if (host_bits & float_flag_underflow) {
+        target_bits |= UCF64_FPSCR_FLAG_UNDERFLOW;
+    }
+    if (host_bits & float_flag_inexact) {
+        target_bits |= UCF64_FPSCR_FLAG_INEXACT;
+    }
+    return target_bits;
+}
+
+uint64_t HELPER(ucf64_get_fpscr)(CPUUniCore64State *env)
+{
+    int i;
+    uint64_t fpscr;
+
+    fpscr = (env->ucf64.xregs[UC64_UCF64_FPSCR] & UCF64_FPSCR_MASK);
+    i = get_float_exception_flags(&env->ucf64.fp_status);
+    fpscr |= (uint64_t)ucf64_exceptbits_from_host(i);
+    return fpscr;
+}
+
+/* Convert ucf64 exception flags to target form.  */
+static inline int ucf64_exceptbits_to_host(int target_bits)
+{
+    int host_bits = 0;
+
+    if (target_bits & UCF64_FPSCR_FLAG_INVALID) {
+        host_bits |= float_flag_invalid;
+    }
+    if (target_bits & UCF64_FPSCR_FLAG_DIVZERO) {
+        host_bits |= float_flag_divbyzero;
+    }
+    if (target_bits & UCF64_FPSCR_FLAG_OVERFLOW) {
+        host_bits |= float_flag_overflow;
+    }
+    if (target_bits & UCF64_FPSCR_FLAG_UNDERFLOW) {
+        host_bits |= float_flag_underflow;
+    }
+    if (target_bits & UCF64_FPSCR_FLAG_INEXACT) {
+        host_bits |= float_flag_inexact;
+    }
+    return host_bits;
+}
+
+void HELPER(ucf64_set_fpscr)(CPUUniCore64State *env, uint64_t val)
+{
+    int i;
+    uint64_t changed;
+
+    changed = env->ucf64.xregs[UC64_UCF64_FPSCR];
+    env->ucf64.xregs[UC64_UCF64_FPSCR] = (val & UCF64_FPSCR_MASK);
+
+    changed ^= val;
+    if (changed & (UCF64_FPSCR_RND_MASK)) {
+        i = UCF64_FPSCR_RND(val);
+        switch (i) {
+        case 0:
+            i = float_round_nearest_even;
+            break;
+        case 1:
+            i = float_round_to_zero;
+            break;
+        case 2:
+            i = float_round_up;
+            break;
+        case 3:
+            i = float_round_down;
+            break;
+        default: /* 100 and 101 not implement */
+            cpu_abort(env, "Unsupported UniCore64-F64 round mode");
+        }
+        set_float_rounding_mode(i, &env->ucf64.fp_status);
+    }
+
+    i = ucf64_exceptbits_to_host(UCF64_FPSCR_TRAPEN(val));
+    set_float_exception_flags(i, &env->ucf64.fp_status);
+}
+
+float32 HELPER(ucf64_adds)(float32 a, float32 b, CPUUniCore64State *env)
+{
+    return float32_add(a, b, &env->ucf64.fp_status);
+}
+
+float64 HELPER(ucf64_addd)(float64 a, float64 b, CPUUniCore64State *env)
+{
+    return float64_add(a, b, &env->ucf64.fp_status);
+}
+
+float32 HELPER(ucf64_subs)(float32 a, float32 b, CPUUniCore64State *env)
+{
+    return float32_sub(a, b, &env->ucf64.fp_status);
+}
+
+float64 HELPER(ucf64_subd)(float64 a, float64 b, CPUUniCore64State *env)
+{
+    return float64_sub(a, b, &env->ucf64.fp_status);
+}
+
+float32 HELPER(ucf64_muls)(float32 a, float32 b, CPUUniCore64State *env)
+{
+    return float32_mul(a, b, &env->ucf64.fp_status);
+}
+
+float64 HELPER(ucf64_muld)(float64 a, float64 b, CPUUniCore64State *env)
+{
+    return float64_mul(a, b, &env->ucf64.fp_status);
+}
+
+float32 HELPER(ucf64_divs)(float32 a, float32 b, CPUUniCore64State *env)
+{
+    return float32_div(a, b, &env->ucf64.fp_status);
+}
+
+float64 HELPER(ucf64_divd)(float64 a, float64 b, CPUUniCore64State *env)
+{
+    return float64_div(a, b, &env->ucf64.fp_status);
+}
+
+float32 HELPER(ucf64_negs)(float32 a)
+{
+    return float32_chs(a);
+}
+
+float64 HELPER(ucf64_negd)(float64 a)
+{
+    return float64_chs(a);
+}
+
+float32 HELPER(ucf64_abss)(float32 a)
+{
+    return float32_abs(a);
+}
+
+float64 HELPER(ucf64_absd)(float64 a)
+{
+    return float64_abs(a);
+}
+
+/* Helper routines to perform bitwise copies between float and int.  */
+static inline float32 ucf64_itos(uint32_t i)
+{
+    union {
+        uint32_t i;
+        float32 s;
+    } v;
+
+    v.i = i;
+    return v.s;
+}
+
+static inline uint32_t ucf64_stoi(float32 s)
+{
+    union {
+        uint32_t i;
+        float32 s;
+    } v;
+
+    v.s = s;
+    return v.i;
+}
+
+static inline float64 ucf64_itod(uint64_t i)
+{
+    union {
+        uint64_t i;
+        float64 d;
+    } v;
+
+    v.i = i;
+    return v.d;
+}
+
+static inline uint64_t ucf64_dtoi(float64 d)
+{
+    union {
+        uint64_t i;
+        float64 d;
+    } v;
+
+    v.d = d;
+    return v.i;
+}
+
+/* Integer to float conversion.  */
+float32 HELPER(ucf64_si2sf)(float32 x, CPUUniCore64State *env)
+{
+    return int32_to_float32(ucf64_stoi(x), &env->ucf64.fp_status);
+}
+
+float64 HELPER(ucf64_si2df)(float32 x, CPUUniCore64State *env)
+{
+    return int32_to_float64(ucf64_stoi(x), &env->ucf64.fp_status);
+}
+
+/* Float to integer conversion.  */
+float32 HELPER(ucf64_sf2si)(float32 x, CPUUniCore64State *env)
+{
+    return ucf64_itos(float32_to_int32(x, &env->ucf64.fp_status));
+}
+
+float32 HELPER(ucf64_df2si)(float64 x, CPUUniCore64State *env)
+{
+    return ucf64_itos(float64_to_int32(x, &env->ucf64.fp_status));
+}
+
+/* floating point conversion */
+float64 HELPER(ucf64_sf2df)(float32 x, CPUUniCore64State *env)
+{
+    return float32_to_float64(x, &env->ucf64.fp_status);
+}
+
+float32 HELPER(ucf64_df2sf)(float64 x, CPUUniCore64State *env)
+{
+    return float64_to_float32(x, &env->ucf64.fp_status);
+}
diff --git a/target-unicore64/ucf64_trans.h b/target-unicore64/ucf64_trans.h
new file mode 100644
index 0000000..734201e
--- /dev/null
+++ b/target-unicore64/ucf64_trans.h
@@ -0,0 +1,317 @@
+/*
+ *  UniCore64 translation
+ *
+ * Copyright (C) 2012 Guan Xuetao
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation, or (at your option) any
+ * later version. See the COPYING file in the top-level directory.
+ */
+
+#define UCOP_UCF64_FMT          (((insn) >> 25) & 0x03)
+
+static inline long ucf64_reg_offset(int reg)
+{
+    if (reg & 1) {
+        return offsetof(CPUUniCore64State, ucf64.regs[reg >> 1])
+          + offsetof(CPU_DoubleU, l.upper);
+    } else {
+        return offsetof(CPUUniCore64State, ucf64.regs[reg >> 1])
+          + offsetof(CPU_DoubleU, l.lower);
+    }
+}
+
+static void do_ucf64_trans(CPUUniCore64State *env, DisasContext *s,
+                           uint32_t insn)
+{
+    TCGv_i64 tmp;
+
+    ILLEGAL_INSN(UCOP_REG_D == 31);
+
+    tmp = tcg_temp_new_i64();
+    if ((insn & 0xfde007ff) == 0xc0400000) { /* insn MFF MTF */
+        if (UCOP_SET(25)) { /* MFF */
+            tcg_gen_ld_i64(tmp, cpu_env, ucf64_reg_offset(UCOP_REG_S1));
+            tcg_gen_mov_i64(cpu_R[UCOP_REG_D], tmp);
+        } else { /* MTF */
+            tcg_gen_mov_i64(tmp, cpu_R[UCOP_REG_D]);
+            tcg_gen_st_i64(tmp, cpu_env, ucf64_reg_offset(UCOP_REG_S1));
+        }
+        return;
+    }
+
+    if ((insn & 0xfde0ffff) == 0xc4400000) { /* insn CFF CTF */
+        if (UCOP_SET(25)) { /* CFF */
+            gen_helper_ucf64_get_fpscr(tmp, cpu_env);
+            tcg_gen_mov_i64(cpu_R[UCOP_REG_D], tmp);
+        } else { /* CTF */
+            tcg_gen_mov_i64(tmp, cpu_R[UCOP_REG_D]);
+            gen_helper_ucf64_set_fpscr(cpu_env, tmp);
+        }
+        return;
+    }
+
+    tcg_temp_free(tmp);
+    ILLEGAL_INSN(true);
+}
+
+static void do_ucf64_fcvt(CPUUniCore64State *env, DisasContext *s,
+                          uint32_t insn)
+{
+    ILLEGAL_INSN(UCOP_UCF64_FMT == 3); /* 26 and 25 bits cannot be 0x3 */
+    ILLEGAL_INSN(UCOP_REG_S1); /* UCOP_REG_S1 must be 0 */
+
+    switch ((insn >> 2) & 0xf) { /* op2 */
+    case 0: /* cvt.s */
+        switch (UCOP_UCF64_FMT) {
+        case 1: /* d */
+            tcg_gen_ld_i64(cpu_F0d, cpu_env, ucf64_reg_offset(UCOP_REG_S2));
+            gen_helper_ucf64_df2sf(cpu_F0s, cpu_F0d, cpu_env);
+            tcg_gen_st_i32(cpu_F0s, cpu_env, ucf64_reg_offset(UCOP_REG_D));
+            break;
+        case 2: /* w */
+            tcg_gen_ld_i32(cpu_F0s, cpu_env, ucf64_reg_offset(UCOP_REG_S2));
+            gen_helper_ucf64_si2sf(cpu_F0s, cpu_F0s, cpu_env);
+            tcg_gen_st_i32(cpu_F0s, cpu_env, ucf64_reg_offset(UCOP_REG_D));
+            break;
+        default: /* undefined */
+            ILLEGAL_INSN(true);
+        }
+        break;
+    case 1: /* cvt.d */
+        switch (UCOP_UCF64_FMT) {
+        case 0: /* s */
+            tcg_gen_ld_i32(cpu_F0s, cpu_env, ucf64_reg_offset(UCOP_REG_S2));
+            gen_helper_ucf64_sf2df(cpu_F0d, cpu_F0s, cpu_env);
+            tcg_gen_st_i64(cpu_F0d, cpu_env, ucf64_reg_offset(UCOP_REG_D));
+            break;
+        case 2: /* w */
+            tcg_gen_ld_i32(cpu_F0s, cpu_env, ucf64_reg_offset(UCOP_REG_S2));
+            gen_helper_ucf64_si2df(cpu_F0d, cpu_F0s, cpu_env);
+            tcg_gen_st_i64(cpu_F0d, cpu_env, ucf64_reg_offset(UCOP_REG_D));
+            break;
+        default: /* undefined */
+            ILLEGAL_INSN(true);
+        }
+        break;
+    case 4: /* cvt.w */
+        switch (UCOP_UCF64_FMT) {
+        case 0: /* s */
+            tcg_gen_ld_i32(cpu_F0s, cpu_env, ucf64_reg_offset(UCOP_REG_S2));
+            gen_helper_ucf64_sf2si(cpu_F0s, cpu_F0s, cpu_env);
+            tcg_gen_st_i32(cpu_F0s, cpu_env, ucf64_reg_offset(UCOP_REG_D));
+            break;
+        case 1: /* d */
+            tcg_gen_ld_i64(cpu_F0d, cpu_env, ucf64_reg_offset(UCOP_REG_S2));
+            gen_helper_ucf64_df2si(cpu_F0s, cpu_F0d, cpu_env);
+            tcg_gen_st_i32(cpu_F0s, cpu_env, ucf64_reg_offset(UCOP_REG_D));
+            break;
+        default: /* undefined */
+           ILLEGAL_INSN(true);
+        }
+        break;
+    default:
+        ILLEGAL_INSN(true);
+    }
+}
+
+static void do_ucf64_fcmp(CPUUniCore64State *env, DisasContext *s,
+                          uint32_t insn)
+{
+    /* TODO */
+    ILLEGAL_INSN(true);
+}
+
+#define gen_helper_ucf64_movs(x, y)      do { } while (0)
+#define gen_helper_ucf64_movd(x, y)      do { } while (0)
+
+#define UCF64_OP1(name)    do {                           \
+        ILLEGAL_INSN(UCOP_REG_S1);                        \
+        switch (UCOP_UCF64_FMT) {                         \
+        case 0 /* s */:                                   \
+            tcg_gen_ld_i32(cpu_F0s, cpu_env,              \
+                           ucf64_reg_offset(UCOP_REG_S2));\
+            gen_helper_ucf64_##name##s(cpu_F0s, cpu_F0s); \
+            tcg_gen_st_i32(cpu_F0s, cpu_env,              \
+                           ucf64_reg_offset(UCOP_REG_D)); \
+            break;                                        \
+        case 1 /* d */:                                   \
+            tcg_gen_ld_i64(cpu_F0d, cpu_env,              \
+                           ucf64_reg_offset(UCOP_REG_S2));\
+            gen_helper_ucf64_##name##d(cpu_F0d, cpu_F0d); \
+            tcg_gen_st_i64(cpu_F0d, cpu_env,              \
+                           ucf64_reg_offset(UCOP_REG_D)); \
+            break;                                        \
+        case 2 /* w */:                                   \
+            ILLEGAL_INSN(true);                           \
+            break;                                        \
+        }                                                 \
+    } while (0)
+
+#define UCF64_OP2(name)    do {                           \
+        switch (UCOP_UCF64_FMT) {                         \
+        case 0 /* s */:                                   \
+            tcg_gen_ld_i32(cpu_F0s, cpu_env,              \
+                           ucf64_reg_offset(UCOP_REG_S1));\
+            tcg_gen_ld_i32(cpu_F1s, cpu_env,              \
+                           ucf64_reg_offset(UCOP_REG_S2));\
+            gen_helper_ucf64_##name##s(cpu_F0s,           \
+                           cpu_F0s, cpu_F1s, cpu_env);    \
+            tcg_gen_st_i32(cpu_F0s, cpu_env,              \
+                           ucf64_reg_offset(UCOP_REG_D)); \
+            break;                                        \
+        case 1 /* d */:                                   \
+            tcg_gen_ld_i64(cpu_F0d, cpu_env,              \
+                           ucf64_reg_offset(UCOP_REG_S1));\
+            tcg_gen_ld_i64(cpu_F1d, cpu_env,              \
+                           ucf64_reg_offset(UCOP_REG_S2));\
+            gen_helper_ucf64_##name##d(cpu_F0d,           \
+                           cpu_F0d, cpu_F1d, cpu_env);    \
+            tcg_gen_st_i64(cpu_F0d, cpu_env,              \
+                           ucf64_reg_offset(UCOP_REG_D)); \
+            break;                                        \
+        case 2 /* w */:                                   \
+            ILLEGAL_INSN(true);                           \
+            break;                                        \
+        }                                                 \
+    } while (0)
+
+static void do_ucf64_datap(CPUUniCore64State *env, DisasContext *s,
+                           uint32_t insn)
+{
+    ILLEGAL_INSN(UCOP_UCF64_FMT == 3);
+
+    switch ((insn >> 2) & 0xf) { /* op2 */
+    case 0: /* add */
+        UCF64_OP2(add);
+        break;
+    case 1: /* sub */
+        UCF64_OP2(sub);
+        break;
+    case 2: /* mul */
+        UCF64_OP2(mul);
+        break;
+    case 4: /* div */
+        UCF64_OP2(div);
+        break;
+    case 5: /* abs */
+        UCF64_OP1(abs);
+        break;
+    case 6: /* mov */
+        UCF64_OP1(mov);
+        break;
+    case 7: /* neg */
+        UCF64_OP1(neg);
+        break;
+    default:
+        ILLEGAL_INSN(true);
+    }
+}
+
+static void do_ucf64_ldst(CPUUniCore64State *env, DisasContext *s,
+                          uint32_t insn)
+{
+    TCGv_i64 t_addr, t_addrh, t_rd_64;
+    int offset, freg;
+
+    t_addr = tcg_temp_new_i64();
+    t_addrh = tcg_temp_new_i64();
+    t_rd_64 = tcg_temp_new_i64();
+
+    /* Prepare base address */
+    if (UCOP_REG_S1 == 31) {
+        tcg_gen_movi_i64(t_addr, s->dc_pc);
+    } else {
+        tcg_gen_mov_i64(t_addr, cpu_R[UCOP_REG_S1]);
+    }
+
+    /* Prepare offset */
+    offset = UCOP_IMM_9 << 2;
+
+    if (UCOP_SET(27)) { /* pre */
+        if (UCOP_SET(28)) { /* add */
+            tcg_gen_addi_i64(t_addr, t_addr, offset);
+        } else { /* sub */
+            tcg_gen_subi_i64(t_addr, t_addr, offset);
+        }
+    }
+
+    if (UCOP_SET(25)) { /* load */
+        if (UCOP_SET(0)) { /* dword */
+            freg = UCOP_REG_D & 0x1e; /* rd should be 0, 2, 4... */
+
+            tcg_gen_qemu_ld32u(t_rd_64, t_addr, 1);
+            tcg_gen_st_i64(t_rd_64, cpu_env, ucf64_reg_offset(freg));
+
+            tcg_gen_addi_i64(t_addrh, t_addr, 4);
+
+            tcg_gen_qemu_ld32u(t_rd_64, t_addrh, 1);
+            tcg_gen_st_i64(t_rd_64, cpu_env, ucf64_reg_offset(freg + 1));
+        } else { /* word */
+            tcg_gen_qemu_ld32u(t_rd_64, t_addr, 1);
+            tcg_gen_st_i64(t_rd_64, cpu_env, ucf64_reg_offset(UCOP_REG_D));
+        }
+
+    } else { /* store */
+        if (UCOP_SET(0)) { /* dword */
+           freg = UCOP_REG_D & 0x1e; /* rd should be 0, 2, 4... */
+
+            tcg_gen_ld_i64(t_rd_64, cpu_env, ucf64_reg_offset(freg));
+            tcg_gen_qemu_st32(t_rd_64, t_addr, 1);
+
+            tcg_gen_addi_i64(t_addrh, t_addr, 4);
+
+            tcg_gen_ld_i64(t_rd_64, cpu_env, ucf64_reg_offset(freg + 1));
+            tcg_gen_qemu_st32(t_rd_64, t_addrh, 1);
+        } else { /* word */
+            tcg_gen_ld_i64(t_rd_64, cpu_env, ucf64_reg_offset(UCOP_REG_D));
+            tcg_gen_qemu_st32(t_rd_64, t_addr, 1);
+        }
+    }
+
+    if (!UCOP_SET(27)) { /* post */
+        if (UCOP_SET(28)) { /* add */
+            tcg_gen_addi_i64(t_addr, t_addr, offset);
+        } else { /* sub */
+            tcg_gen_subi_i64(t_addr, t_addr, offset);
+        }
+    }
+
+    if (UCOP_SET(26)) { /* writeback */
+        ILLEGAL_INSN(UCOP_REG_S1 == 31);
+        tcg_gen_mov_i64(cpu_R[UCOP_REG_S1], t_addr);
+    }
+
+    tcg_temp_free_i64(t_addr);
+    tcg_temp_free_i64(t_addrh);
+    tcg_temp_free_i64(t_rd_64);
+}
+
+static void do_ucf64(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
+{
+    switch (insn & 0x3) {
+    case 0: /* reg trans*/
+        do_ucf64_trans(env, s, insn);
+        break;
+    case 1: /* data proc */
+        switch ((insn >> 27) & 0x3) {
+        case 0:
+            do_ucf64_datap(env, s, insn);
+            break;
+        case 1:
+            ILLEGAL_INSN(true);
+        case 2:
+            do_ucf64_fcvt(env, s, insn);
+            break;
+        case 3:
+            do_ucf64_fcmp(env, s, insn);
+        }
+        break;
+    case 2: /* ls word*/
+    case 3: /* ls dword*/
+        do_ucf64_ldst(env, s, insn);
+        break;
+    }
+}
+
-- 
1.7.9.5

