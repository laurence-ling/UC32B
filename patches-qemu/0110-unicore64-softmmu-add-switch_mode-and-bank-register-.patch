From b803b40bbb909543269ae0985a3fd2e13571cce9 Mon Sep 17 00:00:00 2001
From: Mengchi Zhang <zhangmengchi@mprc.pku.edu.cn>
Date: Tue, 14 Aug 2012 04:50:17 +0800
Subject: [PATCH 110/247] unicore64-softmmu: add switch_mode and bank register
 for exception

Signed-off-by: Zhang Mengchi <zhangmengchi@mprc.pku.edu.cn>
---
 target-unicore64/cpu.h     |    7 ++++++-
 target-unicore64/softmmu.c |   37 ++++++++++++++++++++++++++++++++++---
 2 files changed, 40 insertions(+), 4 deletions(-)

diff --git a/target-unicore64/cpu.h b/target-unicore64/cpu.h
index 3968f6b..0ecc9b4 100644
--- a/target-unicore64/cpu.h
+++ b/target-unicore64/cpu.h
@@ -39,6 +39,11 @@ typedef struct CPUUniCore64State {
     uint64_t bsr;
     uint64_t bfr;
 
+    /* Banked registers. */
+    uint64_t banked_r29[3];
+    uint64_t banked_bsr[3];
+    uint64_t banked_bfr[3];
+
     /* AFR cache for faster execution */
     uint64_t VF; /* V is the bit 31. All other bits are undefined */
     uint64_t CF; /* 0 or 1 */
@@ -56,7 +61,7 @@ typedef struct CPUUniCore64State {
         uint64_t c2_base; /* MMU translation table base.  */
         uint64_t c3_faultstatus; /* Fault status registers.  */
         uint64_t c4_faultaddr; /* Fault address registers.  */
-        uint64_t c4_excpaddr; /* Exception address register.*/
+        uint64_t c4_itrapaddr; /* Exception address register.*/
         uint64_t c9_excpbase; /* Exception base register. */
     } cp0;
 
diff --git a/target-unicore64/softmmu.c b/target-unicore64/softmmu.c
index e88a3cd..570e662 100644
--- a/target-unicore64/softmmu.c
+++ b/target-unicore64/softmmu.c
@@ -78,9 +78,39 @@ void tlb_fill(CPUUniCore64State *env1, target_ulong addr, int is_write,
     env = saved_env;
 }
 
+/* Map CPU modes onto saved register banks */
+static inline int bank_number(int mode)
+{
+    switch (mode) {
+    case ASR_MODE_USER:
+        return 0;
+    case ASR_MODE_PRIV:
+        return 1;
+    case ASR_MODE_DEBUG:
+        return 2;
+    }
+    cpu_abort(cpu_single_env, "Bad mode %x\n", mode);
+    return -1;
+}
+
 void switch_mode(CPUUniCore64State *env, int mode)
 {
-    cpu_abort(env, "%s not supported yet\n", __func__);
+    int old_mode;
+    int bank_num;
+
+    old_mode = env->uncached_asr & ASR_MODE_SELECT;
+    if (mode == old_mode) {
+        return;
+    }
+    bank_num = bank_number(old_mode);
+    env->banked_r29[bank_num] = env->regs[29];
+    env->banked_bsr[bank_num] = env->uncached_asr;
+    env->banked_bfr[bank_num] = env->uncached_afr;
+
+    bank_num = bank_number(mode);
+    env->regs[29] = env->banked_r29[bank_num];
+    env->uncached_asr = env->banked_bsr[bank_num];
+    env->uncached_afr = env->banked_bfr[bank_num];
 }
 
 void do_interrupt(CPUUniCore64State *env)
@@ -108,13 +138,14 @@ void do_interrupt(CPUUniCore64State *env)
         cpu_abort(env, "Unhandled exception 0x%x\n", env->exception_index);
         return;
     }
-    /* Get exception virtual base address , only least 39 bits available */
+    /* Get exception virtual base address, only least 39 bits available */
     addr += (env->cp0.c9_excpbase & 0x7fffffffffULL);
 
+    switch_mode(env, new_mode);
     env->uncached_asr = (env->uncached_asr & ~ASR_MODE_SELECT) | new_mode;
     env->uncached_asr |= ASR_INTR_SELECT;
     /* the PC already points to the proper instruction. */
-    env->cp0.c4_excpaddr = env->regs[31];
+    env->cp0.c4_itrapaddr = env->regs[31];
     env->regs[31] = addr;
     env->interrupt_request |= CPU_INTERRUPT_EXITTB;
 }
-- 
1.7.9.5

