From 0f9a4d1e75ad470c4379673efef4ef2a0ed26f43 Mon Sep 17 00:00:00 2001
From: Mengchi Zhang <zhangmengchi@mprc.pku.edu.cn>
Date: Sat, 4 Aug 2012 20:53:27 +0800
Subject: [PATCH 021/247] unicore64-softmmu: Add unicore64-softmmu build
 support

Signed-off-by: Zhang Mengchi <zhangmengchi@mprc.pku.edu.cn>
Signed-off-by: Zhang Sheng <zhangsheng@mprc.pku.edu.cn>
---
 arch_init.c                           |    2 ++
 arch_init.h                           |    1 +
 configure                             |    1 +
 default-configs/unicore64-softmmu.mak |    1 +
 hw/unicore64/Makefile.objs            |    1 +
 target-unicore64/Makefile.objs        |    3 +-
 target-unicore64/cpu.h                |   11 +++---
 target-unicore64/machine.c            |   23 +++++++++++++
 target-unicore64/softmmu.c            |   61 +++++++++++++++++++++++++++++++++
 9 files changed, 97 insertions(+), 7 deletions(-)
 create mode 100644 default-configs/unicore64-softmmu.mak
 create mode 100644 hw/unicore64/Makefile.objs
 create mode 100644 target-unicore64/machine.c
 create mode 100644 target-unicore64/softmmu.c

diff --git a/arch_init.c b/arch_init.c
index 7b65c48..8146833 100644
--- a/arch_init.c
+++ b/arch_init.c
@@ -93,6 +93,8 @@ int graphic_depth = 15;
 #define QEMU_ARCH QEMU_ARCH_XTENSA
 #elif defined(TARGET_UNICORE32)
 #define QEMU_ARCH QEMU_ARCH_UNICORE32
+#elif defined(TARGET_UNICORE64)
+#define QEMU_ARCH QEMU_ARCH_UNICORE64
 #endif
 
 const uint32_t arch_type = QEMU_ARCH;
diff --git a/arch_init.h b/arch_init.h
index 547f93c..840d920 100644
--- a/arch_init.h
+++ b/arch_init.h
@@ -18,6 +18,7 @@ enum {
     QEMU_ARCH_XTENSA = 4096,
     QEMU_ARCH_OPENRISC = 8192,
     QEMU_ARCH_UNICORE32 = 0x4000,
+    QEMU_ARCH_UNICORE64 = 0x8000,
 };
 
 extern const uint32_t arch_type;
diff --git a/configure b/configure
index 115fcd2..011dff4 100755
--- a/configure
+++ b/configure
@@ -939,6 +939,7 @@ s390x-softmmu \
 xtensa-softmmu \
 xtensaeb-softmmu \
 unicore32-softmmu \
+unicore64-softmmu \
 "
 fi
 # the following are Linux specific
diff --git a/default-configs/unicore64-softmmu.mak b/default-configs/unicore64-softmmu.mak
new file mode 100644
index 0000000..30fd332
--- /dev/null
+++ b/default-configs/unicore64-softmmu.mak
@@ -0,0 +1 @@
+# Default configuration for unicore64-softmmu
diff --git a/hw/unicore64/Makefile.objs b/hw/unicore64/Makefile.objs
new file mode 100644
index 0000000..b7b83af
--- /dev/null
+++ b/hw/unicore64/Makefile.objs
@@ -0,0 +1 @@
+# For UniCore64 machines and boards
diff --git a/target-unicore64/Makefile.objs b/target-unicore64/Makefile.objs
index c3ee343..7adda9d 100644
--- a/target-unicore64/Makefile.objs
+++ b/target-unicore64/Makefile.objs
@@ -1,3 +1,2 @@
 obj-y += translate.o helper.o cpu.o
-
-$(obj)/op_helper.o: QEMU_CFLAGS += $(HELPER_CFLAGS)
+obj-$(CONFIG_SOFTMMU) +=machine.o softmmu.o
diff --git a/target-unicore64/cpu.h b/target-unicore64/cpu.h
index 4e8f8c1..be9c3e0 100644
--- a/target-unicore64/cpu.h
+++ b/target-unicore64/cpu.h
@@ -21,6 +21,8 @@
 
 #define CPUArchState                    struct CPUUniCore64State
 
+#define NB_MMU_MODES                     2
+
 #include "config.h"
 #include "qemu-common.h"
 #include "cpu-defs.h"
@@ -80,15 +82,10 @@ void switch_mode(CPUUniCore64State *, int);
 #define CPU_SAVE_VERSION       2
 
 /* MMU modes definitions */
-#define NB_MMU_MODES           2
 #define MMU_MODE0_SUFFIX       _kernel
 #define MMU_MODE1_SUFFIX       _user
 #define MMU_USER_IDX           1
 
-#include "cpu-all.h"
-#include "cpu-qom.h"
-#include "exec-all.h"
-
 static inline int cpu_mmu_index(CPUUniCore64State *env)
 {
     return (env->uncached_asr & ASR_MODE_SELECT) == ASR_MODE_USER ? 1 : 0;
@@ -107,6 +104,10 @@ static inline void cpu_set_tls(CPUUniCore64State *env, target_ulong newtls)
     abort();
 }
 
+#include "cpu-all.h"
+#include "cpu-qom.h"
+#include "exec-all.h"
+
 static inline void cpu_pc_from_tb(CPUUniCore64State *env, TranslationBlock *tb)
 {
     env->regs[31] = tb->pc;
diff --git a/target-unicore64/machine.c b/target-unicore64/machine.c
new file mode 100644
index 0000000..2553299
--- /dev/null
+++ b/target-unicore64/machine.c
@@ -0,0 +1,23 @@
+/*
+ * Generic machine functions for UniCore64 ISA
+ *
+ * Copyright (C) 2012 Guan Xuetao
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation, or any later version.
+ * See the COPYING file in the top-level directory.
+ */
+#include "hw/hw.h"
+
+void cpu_save(QEMUFile *f, void *opaque)
+{
+    hw_error("%s not supported yet.\n", __func__);
+}
+
+int cpu_load(QEMUFile *f, void *opaque, int version_id)
+{
+    hw_error("%s not supported yet.\n", __func__);
+
+    return 0;
+}
diff --git a/target-unicore64/softmmu.c b/target-unicore64/softmmu.c
new file mode 100644
index 0000000..6bcf57e
--- /dev/null
+++ b/target-unicore64/softmmu.c
@@ -0,0 +1,61 @@
+/*
+ * Softmmu related functions
+ *
+ * Copyright (C) 2012 Guan Xuetao
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation, or any later version.
+ * See the COPYING file in the top-level directory.
+ */
+#include "cpu.h"
+#include "dyngen-exec.h"
+#include "helper.h"
+
+#ifdef CONFIG_USER_ONLY
+#error This file only exist under softmmu circumstance
+#endif
+
+#define MMUSUFFIX _mmu
+
+#define SHIFT 0
+#include "softmmu_template.h"
+
+#define SHIFT 1
+#include "softmmu_template.h"
+
+#define SHIFT 2
+#include "softmmu_template.h"
+
+#define SHIFT 3
+#include "softmmu_template.h"
+
+void tlb_fill(CPUUniCore64State *env, target_ulong addr, int is_write,
+        int mmu_idx, uintptr_t retaddr)
+{
+    cpu_abort(env, "%s not supported yet\n", __func__);
+}
+
+void switch_mode(CPUUniCore64State *env, int mode)
+{
+    cpu_abort(env, "%s not supported yet\n", __func__);
+}
+
+void do_interrupt(CPUUniCore64State *env)
+{
+    cpu_abort(env, "%s not supported yet\n", __func__);
+}
+
+int uc64_cpu_handle_mmu_fault(CPUUniCore64State *env, target_ulong address,
+                              int access_type, int mmu_idx)
+{
+    cpu_abort(env, "%s not supported yet\n", __func__);
+    return 1;
+}
+
+target_phys_addr_t cpu_get_phys_page_debug(CPUUniCore64State *env,
+        target_ulong addr)
+{
+    cpu_abort(env, "%s not supported yet\n", __func__);
+    return addr;
+}
-- 
1.7.9.5

