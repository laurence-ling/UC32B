From eea0b4b64389761e84918fde603a09a978de9d0a Mon Sep 17 00:00:00 2001
From: Guan Xuetao <gxt@mprc.pku.edu.cn>
Date: Mon, 6 Aug 2012 22:42:24 +0800
Subject: [PATCH 026/247] unicore64: Implement disas_uc64_insn framework

Signed-off-by: Guan Xuetao <gxt@mprc.pku.edu.cn>
---
 target-unicore64/translate.c |  150 +++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 147 insertions(+), 3 deletions(-)

diff --git a/target-unicore64/translate.c b/target-unicore64/translate.c
index 33589ef..c36d393 100644
--- a/target-unicore64/translate.c
+++ b/target-unicore64/translate.c
@@ -50,18 +50,162 @@ void uc64_translate_init(void)
 #include "helper.h"
 }
 
+#define UNHANDLED_FLOW  cpu_abort(env,                                  \
+                        "Unhandled control flow at line %d in %s!",     \
+                        __LINE__, __FILE__)
+
+/* internal defines */
+typedef struct DisasContext {
+    int dc_jmp;
+    int dc_singlestep;
+    target_ulong dc_pc;
+    struct TranslationBlock *dc_tb;
+} DisasContext;
+
+static void do_datap(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
+{
+}
+
+static void do_srfr(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
+{
+}
+
+static void do_muldiv(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
+{
+}
+
+static void do_ldst(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
+{
+}
+
+static void do_branch(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
+{
+}
+
+static void do_coproc(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
+{
+}
+
+static void disas_uc64_insn(CPUUniCore64State *env, DisasContext *s)
+{
+    unsigned int insn;
+
+    insn = ldl_code(s->dc_pc);
+    s->dc_pc += 4;
+
+    /* UniCore64 instructions class:
+     *   AAAx xxxx xxxx xxxx xxxx xxxx xxxx xxxx
+     */
+    switch (insn >> 29) {
+    case 0x0:
+        do_datap(env, s, insn);
+        break;
+    case 0x1:
+        do_srfr(env, s, insn);
+        break;
+    case 0x2:
+        do_muldiv(env, s, insn);
+        break;
+    case 0x3:
+        /* Fall through */
+    case 0x4:
+        do_ldst(env, s, insn);
+        break;
+    case 0x5:
+        do_branch(env, s, insn);
+        break;
+    case 0x6:
+        do_coproc(env, s, insn);
+        break;
+    case 0x7:
+        do_branch(env, s, insn);
+        /* All conditions are handled, so default is not necessary */
+    }
+}
+
 /* generate intermediate code in gen_opc_buf and gen_opparam_buf for
    basic block 'tb'. If search_pc is TRUE, also generate PC
    information for each intermediate instruction. */
 static inline void gen_intermediate_code_internal(CPUUniCore64State *env,
         TranslationBlock *tb, int search_pc)
 {
-    int num_insns = 0;
+    DisasContext dc1, *dc = &dc1;
+    target_ulong pc_start;
+    int num_insns;
+    int max_insns;
+
+    pc_start = tb->pc;
+
+    dc->dc_tb = tb;
+    dc->dc_pc = pc_start;
+    dc->dc_jmp = DISAS_NEXT;
+    dc->dc_singlestep = env->singlestep_enabled;
+
+    num_insns = 0;
+    max_insns = tb->cflags & CF_COUNT_MASK;
+    if (max_insns == 0) {
+        max_insns = CF_COUNT_MASK;
+    }
 
     gen_icount_start();
+    do {
+        if (unlikely(!QTAILQ_EMPTY(&env->breakpoints))) {
+            UNHANDLED_FLOW;
+        }
+
+        if (search_pc) {
+            UNHANDLED_FLOW;
+        }
+
+        if (tb->cflags & CF_LAST_IO) {
+            UNHANDLED_FLOW;
+        }
+
+        disas_uc64_insn(env, dc);
+
+        /* Translation stops when a conditional branch is encountered.
+         * Otherwise the subsequent code could get translated several times.
+         * Also stop translation when a page boundary is reached.  This
+         * ensures prefetch aborts occur at the right place.  */
+        num_insns++;
+        if (num_insns >= max_insns)
+            goto done_disas_loop;
+
+        if (singlestep || env->singlestep_enabled)
+            goto done_disas_loop;
+
+        if (gen_opc_ptr >= gen_opc_buf + OPC_MAX_SIZE)
+            goto done_disas_loop;
+
+        if (dc->dc_pc >= (pc_start & TARGET_PAGE_MASK) + TARGET_PAGE_SIZE)
+            goto done_disas_loop;
+
+    } while (dc->dc_jmp != DISAS_NEXT);
+
+done_disas_loop:
+    if (unlikely(env->singlestep_enabled)) {
+        UNHANDLED_FLOW;
+    } else {
+        /* While branches must always occur at the end of an IT block,
+         * there are a few other things that can cause us to terminate
+         * the TB in the middel of an IT block:
+         *  - Exception generating instructions (bkpt, swi, undefined).
+         *  - Page boundaries.
+         *  - Hardware watchpoints.
+         * Hardware breakpoints have already been handled and skip this code.
+         */
+        UNHANDLED_FLOW;
+    }
+
     gen_icount_end(tb, num_insns);
-    printf("%s not supported yet, in file %s line %d\n", __func__, __FILE__, __LINE__);
-    abort();
+    *gen_opc_ptr = INDEX_op_end;
+
+    if (search_pc) {
+        UNHANDLED_FLOW;
+    } else {
+        tb->size = dc->dc_pc - pc_start;
+        tb->icount = num_insns;
+    }
 }
 
 void gen_intermediate_code(CPUUniCore64State *env, TranslationBlock *tb)
-- 
1.7.9.5

