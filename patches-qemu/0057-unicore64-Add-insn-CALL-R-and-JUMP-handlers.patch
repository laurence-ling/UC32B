From 1ad8e14eb41e81930f2b329c42ebd5259f0b74bf Mon Sep 17 00:00:00 2001
From: Guan Xuetao <gxt@mprc.pku.edu.cn>
Date: Thu, 9 Aug 2012 17:56:59 +0800
Subject: [PATCH 057/247] unicore64: Add insn CALL-R and JUMP handlers

Signed-off-by: Guan Xuetao <gxt@mprc.pku.edu.cn>
---
 target-unicore64/translate.c |   34 ++++++++++++++++++++++------------
 1 file changed, 22 insertions(+), 12 deletions(-)

diff --git a/target-unicore64/translate.c b/target-unicore64/translate.c
index 8859bde..b956c7e 100644
--- a/target-unicore64/translate.c
+++ b/target-unicore64/translate.c
@@ -535,23 +535,30 @@ static void do_branch(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
 {
     target_ulong t_addr;
 
-    ILLEGAL_INSN(UCOP_OPCODE == 0xf);
-
-    if (UCOP_OPCODE != 0xe) { /* conditional jump */
-        s->dc_condlabel = gen_new_label(); /* label for next instruction */
-        gen_test_cond(UCOP_OPCODE, s->dc_condlabel);
-        s->dc_condinsn = true;
-    }
-
     if (UCOP_SET(28)) { /* link */
         /* r30 <- next_insn */
         tcg_gen_movi_i64(cpu_R[30], s->dc_pc);
     }
 
-    /* r31 <- current_insn + (signed_offset * 4) */
-    t_addr = (s->dc_pc - 4) + ((((int32_t)insn) << 8) >> 6);
-    gen_goto_tb(s, 0, t_addr);
-    s->dc_jmp = DISAS_TB_JUMP;
+    if (UCOP_OPCODE == 0xf) {
+        ILLEGAL_INSN(insn & 0x00ff07ff); /* other bits must be 0 */
+        ILLEGAL_INSN(UCOP_REG_S1 == 31);
+
+        /* JUMP and CALL-R instruction */
+        tcg_gen_mov_i64(cpu_R[31], cpu_R[UCOP_REG_S1]);
+        s->dc_jmp = DISAS_JUMP;
+    } else { /* This branch means IMM24 */
+        if (UCOP_OPCODE != 0xe) { /* conditional branch */
+            s->dc_condlabel = gen_new_label(); /* label for next instruction */
+            gen_test_cond(UCOP_OPCODE, s->dc_condlabel);
+            s->dc_condinsn = true;
+        } /* else: UCOP_OPCODE == 0xe, it's insn CALL, just fall through */
+
+        /* r31 <- current_insn + (signed_offset * 4) */
+        t_addr = (s->dc_pc - 4) + ((((int32_t)insn) << 8) >> 6);
+        gen_goto_tb(s, 0, t_addr);
+        s->dc_jmp = DISAS_TB_JUMP;
+    }
 }
 
 static void do_coproc(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
@@ -724,6 +731,9 @@ done_disas_loop:
         case DISAS_TB_JUMP:
             /* nothing more to generate */
             break;
+        case DISAS_JUMP:
+            tcg_gen_exit_tb(0);
+            break;
         default:
             UNHANDLED_FLOW(true);
         }
-- 
1.7.9.5

