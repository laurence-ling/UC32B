From 4323758690ff1151fd5e58a3b9ce03e5f0d02aa5 Mon Sep 17 00:00:00 2001
From: Guan Xuetao <gxt@mprc.pku.edu.cn>
Date: Thu, 9 Aug 2012 09:57:52 +0800
Subject: [PATCH 054/247] unicore64: Add cmpsub.a cmpadd.a dcmpsub.a dcmpadd.a
 handlers

Signed-off-by: Guan Xuetao <gxt@mprc.pku.edu.cn>
---
 target-unicore64/helper.c    |   50 ++++++++++++++++++++++++++++++++++++++++++
 target-unicore64/helper.h    |    5 +++++
 target-unicore64/translate.c |   33 +++++++++++++++++++++++++++-
 3 files changed, 87 insertions(+), 1 deletion(-)

diff --git a/target-unicore64/helper.c b/target-unicore64/helper.c
index c2688d5..0b5cd7a 100644
--- a/target-unicore64/helper.c
+++ b/target-unicore64/helper.c
@@ -3,6 +3,7 @@
  */
 
 #include "cpu.h"
+#include "dyngen-exec.h"
 #include "gdbstub.h"
 #include "helper.h"
 #include "host-utils.h"
@@ -48,6 +49,55 @@ void helper_cp1_putx(target_ulong x)
     fflush(NULL);
 }
 
+/*
+ * Flag setting arithmetic is awkward because we need to do comparisons.
+ * The only way to do that in TCG is a conditional branch, which clobbers
+ * all our temporaries.  For now implement these as helper functions.
+ */
+uint32_t HELPER(sub_cc_i32)(uint32_t a, uint32_t b)
+{
+    uint32_t result;
+    result = a - b;
+    env->NF = result >> 31;
+    env->ZF = (result == 0);
+    env->CF = result < a;
+    env->VF = ((a ^ b ^ -1) & (a ^ result)) >> 31;
+    return result;
+}
+
+uint64_t HELPER(sub_cc_i64)(uint64_t a, uint64_t b)
+{
+    uint64_t result;
+    result = a - b;
+    env->NF = result >> 63;
+    env->ZF = (result == 0);
+    env->CF = result < a;
+    env->VF = ((a ^ b ^ -1) & (a ^ result)) >> 63;
+    return result;
+}
+
+uint32_t HELPER(add_cc_i32)(uint32_t a, uint32_t b)
+{
+    uint32_t result;
+    result = a + b;
+    env->NF = result >> 31;
+    env->ZF = (result == 0);
+    env->CF = result < a;
+    env->VF = ((a ^ b ^ -1) & (a ^ result)) >> 31;
+    return result;
+}
+
+uint64_t HELPER(add_cc_i64)(uint64_t a, uint64_t b)
+{
+    uint64_t result;
+    result = a + b;
+    env->NF = result >> 63;
+    env->ZF = (result == 0);
+    env->CF = result < a;
+    env->VF = ((a ^ b ^ -1) & (a ^ result)) >> 63;
+    return result;
+}
+
 #ifdef CONFIG_USER_ONLY
 void switch_mode(CPUUniCore64State *env, int mode)
 {
diff --git a/target-unicore64/helper.h b/target-unicore64/helper.h
index 4cb2943..27e977a 100644
--- a/target-unicore64/helper.h
+++ b/target-unicore64/helper.h
@@ -11,4 +11,9 @@
 DEF_HELPER_1(cp1_putc, void, i64)
 DEF_HELPER_1(cp1_putx, void, i64)
 
+DEF_HELPER_2(sub_cc_i32, i32, i32, i32)
+DEF_HELPER_2(sub_cc_i64, i64, i64, i64)
+DEF_HELPER_2(add_cc_i32, i32, i32, i32)
+DEF_HELPER_2(add_cc_i64, i64, i64, i64)
+
 #include "def-helper.h"
diff --git a/target-unicore64/translate.c b/target-unicore64/translate.c
index 62c3d61..2dc67ac 100644
--- a/target-unicore64/translate.c
+++ b/target-unicore64/translate.c
@@ -297,7 +297,6 @@ static void do_datap(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
     TCGv_i64 t_op1_64, t_op2_64;
     TCGv_i32 t_op1_32, t_op2_32;
 
-    ILLEGAL_INSN(UCOP_SET(23)); /* S bit */
     ILLEGAL_INSN(UCOP_REG_D == 31);
 
     /* Prepare op1 if two operands */
@@ -331,6 +330,7 @@ static void do_datap(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
 
     switch (UCOP_OPCODE) {
     case 0x00: /* insn AND DAND */
+        ILLEGAL_INSN(UCOP_SET(23)); /* S bit */
         if (UCOP_SET(22)) { /* insn DAND */
             tcg_gen_and_i64(t_op1_64, t_op1_64, t_op2_64);
             tcg_gen_mov_i64(cpu_R[UCOP_REG_D], t_op1_64);
@@ -344,6 +344,7 @@ static void do_datap(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
         tcg_temp_free_i64(t_op2_64);
         break;
     case 0x04: /* insn ADD DADD */
+        ILLEGAL_INSN(UCOP_SET(23)); /* S bit */
         if (UCOP_SET(22)) { /* insn DADD */
             tcg_gen_add_i64(t_op1_64, t_op1_64, t_op2_64);
             tcg_gen_mov_i64(cpu_R[UCOP_REG_D], t_op1_64);
@@ -356,7 +357,36 @@ static void do_datap(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
         tcg_temp_free_i64(t_op1_64);
         tcg_temp_free_i64(t_op2_64);
         break;
+    case 0x0a: /* insn CMPSUB.A DCMPSUB.A */
+        ILLEGAL_INSN(!UCOP_SET(23)); /* S bit */
+        ILLEGAL_INSN(UCOP_REG_D);
+
+        if (UCOP_SET(22)) { /* insn DCMPSUB.A */
+            gen_helper_sub_cc_i64(t_op1_64, t_op1_64, t_op2_64);
+        } else { /* insn CMPSUB.A */
+            gen_helper_sub_cc_i32(t_op1_32, t_op1_32, t_op2_32);
+            tcg_temp_free_i32(t_op1_32);
+            tcg_temp_free_i32(t_op2_32);
+        }
+        tcg_temp_free_i64(t_op1_64);
+        tcg_temp_free_i64(t_op2_64);
+        break;
+    case 0x0b: /* insn cmpadd dcmpadd */
+        ILLEGAL_INSN(!UCOP_SET(23)); /* S bit */
+        ILLEGAL_INSN(UCOP_REG_D);
+
+        if (UCOP_SET(22)) { /* insn DCMPADD */
+            gen_helper_add_cc_i64(t_op1_64, t_op1_64, t_op2_64);
+        } else { /* insn CMPADD */
+            gen_helper_add_cc_i32(t_op1_32, t_op1_32, t_op2_32);
+            tcg_temp_free_i32(t_op1_32);
+            tcg_temp_free_i32(t_op2_32);
+        }
+        tcg_temp_free_i64(t_op1_64);
+        tcg_temp_free_i64(t_op2_64);
+        break;
     case 0x0d: /* insn MOV DMOV */
+        ILLEGAL_INSN(UCOP_SET(23)); /* S bit */
         ILLEGAL_INSN(UCOP_REG_S1);
 
         if (UCOP_SET(22)) { /* insn DMOV */
@@ -368,6 +398,7 @@ static void do_datap(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
         tcg_temp_free_i64(t_op2_64);
         break;
     case 0x0f: /* insn NOT DNOT */
+        ILLEGAL_INSN(UCOP_SET(23)); /* S bit */
         ILLEGAL_INSN(UCOP_REG_S1);
 
         if (UCOP_SET(22)) { /* insn DNOT */
-- 
1.7.9.5

