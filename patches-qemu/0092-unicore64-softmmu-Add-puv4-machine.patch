From aab93e0370638300bccb8fadd9b116e69e7b876c Mon Sep 17 00:00:00 2001
From: Liu Guoli <liuguoli@mprc.pku.edu.cn>
Date: Thu, 9 Aug 2012 20:37:46 +0800
Subject: [PATCH 092/247] unicore64-softmmu: Add puv4 machine

Signed-off-by: Liu Guoli <liuguoli@mprc.pku.edu.cn>
---
 default-configs/unicore64-softmmu.mak |    1 +
 hw/puv4.c                             |   78 +++++++++++++++++++++++++++++++++
 hw/puv4.h                             |   11 +++++
 hw/unicore64/Makefile.objs            |    5 +++
 4 files changed, 95 insertions(+)
 create mode 100644 hw/puv4.c
 create mode 100644 hw/puv4.h

diff --git a/default-configs/unicore64-softmmu.mak b/default-configs/unicore64-softmmu.mak
index 30fd332..286d008 100644
--- a/default-configs/unicore64-softmmu.mak
+++ b/default-configs/unicore64-softmmu.mak
@@ -1 +1,2 @@
 # Default configuration for unicore64-softmmu
+CONFIG_PUV4=y
diff --git a/hw/puv4.c b/hw/puv4.c
new file mode 100644
index 0000000..d5b61a8
--- /dev/null
+++ b/hw/puv4.c
@@ -0,0 +1,78 @@
+#include "console.h"
+#include "elf.h"
+#include "exec-memory.h"
+#include "sysbus.h"
+#include "boards.h"
+#include "loader.h"
+#include "pc.h"
+
+#undef DEBUG_PUV4
+#include "puv4.h"
+
+#define KERNEL_LOAD_ADDR        0x03000000
+#define KERNEL_MAX_SIZE         0x00800000 /* Just a guess */
+
+static void puv4_board_init(CPUUniCore64State *env, ram_addr_t ram_size)
+{
+    MemoryRegion *ram_memory = g_new(MemoryRegion, 1);
+
+    /* SDRAM at address zero.  */
+    memory_region_init_ram(ram_memory, "puv4.ram", ram_size);
+    vmstate_register_ram_global(ram_memory);
+    memory_region_add_subregion(get_system_memory(), 0, ram_memory);
+}
+
+static void puv4_load_kernel(const char *kernel_filename)
+{
+    int size;
+
+    assert(kernel_filename != NULL);
+
+    /* only zImage format supported */
+    size = load_image_targphys(kernel_filename, KERNEL_LOAD_ADDR,
+            KERNEL_MAX_SIZE);
+    if (size < 0) {
+        hw_error("Load kernel error: '%s'\n", kernel_filename);
+    }
+
+    /* cheat curses that we have a graphic console, only under ocd console */
+    graphic_console_init(NULL, NULL, NULL, NULL, NULL);
+}
+
+static void puv4_init(ram_addr_t ram_size, const char *boot_device,
+                     const char *kernel_filename, const char *kernel_cmdline,
+                     const char *initrd_filename, const char *cpu_model)
+{
+    CPUUniCore64State *env;
+
+    if (initrd_filename) {
+        hw_error("Please use kernel built-in initramdisk.\n");
+    }
+
+    if (!cpu_model) {
+        cpu_model = "UniCore-III";
+    }
+
+    env = cpu_init(cpu_model);
+    if (!env) {
+        hw_error("Unable to find CPU definition\n");
+    }
+
+    puv4_board_init(env, ram_size);
+    puv4_load_kernel(kernel_filename);
+}
+
+static QEMUMachine puv4_machine = {
+    .name = "puv4",
+    .desc = "PKUnity Version-4 based on UniCore64",
+    .init = puv4_init,
+    .is_default = 1,
+    .use_scsi = 0,
+};
+
+static void puv4_machine_init(void)
+{
+    qemu_register_machine(&puv4_machine);
+}
+
+machine_init(puv4_machine_init)
diff --git a/hw/puv4.h b/hw/puv4.h
new file mode 100644
index 0000000..3278270
--- /dev/null
+++ b/hw/puv4.h
@@ -0,0 +1,11 @@
+#ifndef QEMU_HW_PUV4_H
+#define QEMU_HW_PUV4_H
+
+/* All puv4_*.c use DPRINTF for debug. */
+#ifdef DEBUG_PUV4
+#define DPRINTF(fmt, ...) printf("%s: " fmt , __func__, ## __VA_ARGS__)
+#else
+#define DPRINTF(fmt, ...) do {} while (0)
+#endif
+
+#endif /* !QEMU_HW_PUV4_H */
diff --git a/hw/unicore64/Makefile.objs b/hw/unicore64/Makefile.objs
index b7b83af..685f440 100644
--- a/hw/unicore64/Makefile.objs
+++ b/hw/unicore64/Makefile.objs
@@ -1 +1,6 @@
 # For UniCore64 machines and boards
+
+# PKUnity-v4 SoC and board information
+obj-${CONFIG_PUV4} += puv4.o
+
+obj-y := $(addprefix ../,$(obj-y))
-- 
1.7.9.5

