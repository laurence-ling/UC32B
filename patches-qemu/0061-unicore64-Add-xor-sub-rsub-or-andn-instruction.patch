From e0ec4c7cd4aeb59216d4a6acbfbfef956bffe113 Mon Sep 17 00:00:00 2001
From: Liu Wenhui <liuwenhui@mprc.pku.edu.cn>
Date: Fri, 10 Aug 2012 04:38:58 +0800
Subject: [PATCH 061/247] unicore64: Add xor/sub/rsub/or/andn instruction

Signed-off-by: Liu Wenhui <liuwenhui@mprc.pku.edu.cn>
---
 target-unicore64/translate.c |   76 ++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 73 insertions(+), 3 deletions(-)

diff --git a/target-unicore64/translate.c b/target-unicore64/translate.c
index 48b5916..89c68e6 100644
--- a/target-unicore64/translate.c
+++ b/target-unicore64/translate.c
@@ -329,12 +329,12 @@ static void do_datap(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
     }
 
     switch (UCOP_OPCODE) {
-    case 0x00: /* insn AND DAND */
+    case 0x00: /* insn and dand */
         ILLEGAL_INSN(UCOP_SET(23)); /* S bit */
-        if (UCOP_SET(22)) { /* insn DAND */
+        if (UCOP_SET(22)) { /* insn dand */
             tcg_gen_and_i64(t_op1_64, t_op1_64, t_op2_64);
             tcg_gen_mov_i64(cpu_R[UCOP_REG_D], t_op1_64);
-        } else { /* insn AND */
+        } else { /* insn and */
             tcg_gen_and_i32(t_op1_32, t_op1_32, t_op2_32);
             tcg_gen_extu_i32_i64(cpu_R[UCOP_REG_D], t_op1_32);
             tcg_temp_free_i32(t_op1_32);
@@ -343,6 +343,48 @@ static void do_datap(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
         tcg_temp_free_i64(t_op1_64);
         tcg_temp_free_i64(t_op2_64);
         break;
+    case 0x01: /* insn xor dxor */
+        ILLEGAL_INSN(UCOP_SET(23)); /* S bit */
+        if (UCOP_SET(22)) { /* insn dxor */
+            tcg_gen_xor_i64(t_op1_64, t_op1_64, t_op2_64);
+            tcg_gen_mov_i64(cpu_R[UCOP_REG_D], t_op1_64);
+        } else { /* insn xor */
+            tcg_gen_xor_i32(t_op1_32, t_op1_32, t_op2_32);
+            tcg_gen_extu_i32_i64(cpu_R[UCOP_REG_D], t_op1_32);
+            tcg_temp_free_i32(t_op1_32);
+            tcg_temp_free_i32(t_op2_32);
+        }
+        tcg_temp_free_i64(t_op1_64);
+        tcg_temp_free_i64(t_op2_64);
+        break;
+    case 0x02: /* insn sub dsub */
+        ILLEGAL_INSN(UCOP_SET(23)); /* S bit */
+        if (UCOP_SET(22)) { /* insn dsub */
+            tcg_gen_sub_i64(t_op1_64, t_op1_64, t_op2_64);
+            tcg_gen_mov_i64(cpu_R[UCOP_REG_D], t_op1_64);
+        } else { /* insn sub */
+            tcg_gen_sub_i32(t_op1_32, t_op1_32, t_op2_32);
+            tcg_gen_extu_i32_i64(cpu_R[UCOP_REG_D], t_op1_32);
+            tcg_temp_free_i32(t_op1_32);
+            tcg_temp_free_i32(t_op2_32);
+        }
+        tcg_temp_free_i64(t_op1_64);
+        tcg_temp_free_i64(t_op2_64);
+        break;
+    case 0x03: /* insn rsub drsub */
+        ILLEGAL_INSN(UCOP_SET(23)); /* S bit */
+        if (UCOP_SET(22)) { /* insn drsub */
+            tcg_gen_sub_i64(t_op1_64, t_op2_64, t_op1_64);
+            tcg_gen_mov_i64(cpu_R[UCOP_REG_D], t_op1_64);
+        } else { /* insn rsub */
+            tcg_gen_sub_i32(t_op1_32, t_op2_32, t_op1_32);
+            tcg_gen_extu_i32_i64(cpu_R[UCOP_REG_D], t_op1_32);
+            tcg_temp_free_i32(t_op1_32);
+            tcg_temp_free_i32(t_op2_32);
+        }
+        tcg_temp_free_i64(t_op1_64);
+        tcg_temp_free_i64(t_op2_64);
+        break;
     case 0x04: /* insn ADD DADD */
         ILLEGAL_INSN(UCOP_SET(23)); /* S bit */
         if (UCOP_SET(22)) { /* insn DADD */
@@ -385,6 +427,20 @@ static void do_datap(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
         tcg_temp_free_i64(t_op1_64);
         tcg_temp_free_i64(t_op2_64);
         break;
+    case 0x0c: /* insn or dor */
+        ILLEGAL_INSN(UCOP_SET(23)); /* S bit */
+        if (UCOP_SET(22)) { /* insn dor */
+            tcg_gen_or_i64(t_op1_64, t_op1_64, t_op2_64);
+            tcg_gen_mov_i64(cpu_R[UCOP_REG_D], t_op1_64);
+        } else { /* insn or */
+            tcg_gen_or_i32(t_op1_32, t_op1_32, t_op2_32);
+            tcg_gen_extu_i32_i64(cpu_R[UCOP_REG_D], t_op1_32);
+            tcg_temp_free_i32(t_op1_32);
+            tcg_temp_free_i32(t_op2_32);
+        }
+        tcg_temp_free_i64(t_op1_64);
+        tcg_temp_free_i64(t_op2_64);
+        break;
     case 0x0d: /* insn MOV DMOV */
         ILLEGAL_INSN(UCOP_SET(23)); /* S bit */
         ILLEGAL_INSN(UCOP_REG_S1);
@@ -397,6 +453,20 @@ static void do_datap(CPUUniCore64State *env, DisasContext *s, uint32_t insn)
         }
         tcg_temp_free_i64(t_op2_64);
         break;
+    case 0x0e: /* insn andn dandn */
+        ILLEGAL_INSN(UCOP_SET(23)); /* S bit */
+        if (UCOP_SET(22)) { /* insn dandn */
+            tcg_gen_andc_i64(t_op1_64, t_op1_64, t_op2_64);
+            tcg_gen_mov_i64(cpu_R[UCOP_REG_D], t_op1_64);
+        } else { /* insn andn */
+            tcg_gen_andc_i32(t_op1_32, t_op1_32, t_op2_32);
+            tcg_gen_extu_i32_i64(cpu_R[UCOP_REG_D], t_op1_32);
+            tcg_temp_free_i32(t_op1_32);
+            tcg_temp_free_i32(t_op2_32);
+        }
+        tcg_temp_free_i64(t_op1_64);
+        tcg_temp_free_i64(t_op2_64);
+        break;
     case 0x0f: /* insn NOT DNOT */
         ILLEGAL_INSN(UCOP_SET(23)); /* S bit */
         ILLEGAL_INSN(UCOP_REG_S1);
-- 
1.7.9.5

